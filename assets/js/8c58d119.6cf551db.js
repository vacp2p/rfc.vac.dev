"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[2735],{63153:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var i=a(87462),n=(a(67294),a(3905));const l={title:"ACCOUNT",name:"Account",status:"deprecated",description:"This specification explains what a Status account is, and how a node establishes trust.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Corey Petty &lt;corey@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;","Samuel Hawksby-Robinson &lt;samuel@status.im&gt;"]},r=void 0,s={unversionedId:"deprecated/account",id:"deprecated/account",title:"ACCOUNT",description:"This specification explains what a Status account is, and how a node establishes trust.",source:"@site/status/deprecated/account.md",sourceDirName:"deprecated",slug:"/deprecated/account",permalink:"/status/deprecated/account",draft:!1,tags:[],version:"current",frontMatter:{title:"ACCOUNT",name:"Account",status:"deprecated",description:"This specification explains what a Status account is, and how a node establishes trust.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Corey Petty &lt;corey@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;","Samuel Hawksby-Robinson &lt;samuel@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"IPFS-gateway-for-Sticker-Pack",permalink:"/status/deprecated/IPFS-gateway-for-sticker-Pack"},next:{title:"CLIENT",permalink:"/status/deprecated/client"}},o={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Initial Key Generation",id:"initial-key-generation",level:2},{value:"Public/Private Keypairs",id:"publicprivate-keypairs",level:3},{value:"X3DH Prekey bundle creation",id:"x3dh-prekey-bundle-creation",level:3},{value:"Account Broadcasting",id:"account-broadcasting",level:2},{value:"X3DH Prekey bundles",id:"x3dh-prekey-bundles",level:3},{value:"Optional Account additions",id:"optional-account-additions",level:2},{value:"ENS Username",id:"ens-username",level:3},{value:"Trust establishment",id:"trust-establishment",level:2},{value:"Terms Glossary",id:"terms-glossary",level:3},{value:"Contact Discovery",id:"contact-discovery",level:3},{value:"Public channels",id:"public-channels",level:4},{value:"Private 1:1 messages",id:"private-11-messages",level:4},{value:"Initial Key Exchange",id:"initial-key-exchange",level:3},{value:"Bundles",id:"bundles",level:4},{value:"Contact Verification",id:"contact-verification",level:3},{value:"Identicon",id:"identicon",level:4},{value:"3 word pseudonym / Whisper/Waku key fingerprint",id:"3-word-pseudonym--whisperwaku-key-fingerprint",level:4},{value:"ENS name",id:"ens-name",level:4},{value:"Public Key Serialization",id:"public-key-serialization",level:2},{value:"Basic Serialization Example",id:"basic-serialization-example",level:3},{value:"Public Key &quot;Compression&quot; Rationale",id:"public-key-compression-rationale",level:3},{value:"Key Encoding",id:"key-encoding",level:3},{value:"Public Key Types",id:"public-key-types",level:3},{value:"De/Serialization Process Flow",id:"deserialization-process-flow",level:3},{value:"Serialization Example",id:"serialization-example",level:4},{value:"Deserialization Example",id:"deserialization-example",level:4},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Version 0.4",id:"version-04",level:3},{value:"Version 0.3",id:"version-03",level:3},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Status: deprecated"),(0,n.kt)("li",{parentName:"ul"},"Editor: Filip Dimitrijevic ","<",(0,n.kt)("a",{parentName:"li",href:"mailto:filip@status.im"},"filip@status.im"),">"),(0,n.kt)("li",{parentName:"ul"},"Contributors:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Corey Petty ","<",(0,n.kt)("a",{parentName:"li",href:"mailto:corey@status.im"},"corey@status.im"),">"),(0,n.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n ","<",(0,n.kt)("a",{parentName:"li",href:"mailto:oskar@status.im"},"oskar@status.im"),">"),(0,n.kt)("li",{parentName:"ul"},"Samuel Hawksby-Robinson ","<",(0,n.kt)("a",{parentName:"li",href:"mailto:samuel@status.im"},"samuel@status.im"),">")))),(0,n.kt)("h2",{id:"abstract"},"Abstract"),(0,n.kt)("p",null,"This specification explains what a Status account is,",(0,n.kt)("br",{parentName:"p"}),"\n","and how a node establishes trust."),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"The core concept of an account in Status is a set of cryptographic keypairs.\nNamely, the combination of the following:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"a Whisper/Waku chat identity keypair"),(0,n.kt)("li",{parentName:"ol"},"a set of cryptocurrency wallet keypairs")),(0,n.kt)("p",null,"The node verifies or derives everything else associated with the contact from the above items, including:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Ethereum address (future verification, currently the same base keypair)"),(0,n.kt)("li",{parentName:"ul"},"3 word mnemonic name"),(0,n.kt)("li",{parentName:"ul"},"identicon"),(0,n.kt)("li",{parentName:"ul"},"message signatures")),(0,n.kt)("h2",{id:"initial-key-generation"},"Initial Key Generation"),(0,n.kt)("h3",{id:"publicprivate-keypairs"},"Public/Private Keypairs"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"An ECDSA (secp256k1 curve) public/private keypair MUST be generated via a ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki"},"BIP43")," derived path from a ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"},"BIP39")," mnemonic seed phrase."),(0,n.kt)("li",{parentName:"ul"},"The default paths are defined as such:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Whisper/Waku Chat Key (",(0,n.kt)("inlineCode",{parentName:"li"},"IK"),"): ",(0,n.kt)("inlineCode",{parentName:"li"},"m/43'/60'/1581'/0'/0"),"  (post Multiaccount integration)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"following ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1581.md"},"EIP1581"))))))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"- Status Wallet paths: `m/44'/60'/0'/0/i` starting at `i=0`\n  - following [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)\n  - NOTE: this (`i=0`) is also the current (and only) path for Whisper/Waku key before Multiaccount integration\n")),(0,n.kt)("h3",{id:"x3dh-prekey-bundle-creation"},"X3DH Prekey bundle creation"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Status follows the X3DH prekey bundle scheme that ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Signal_Messenger#2013%E2%80%932018:_Open_Whisper_Systems"},"Open Whisper Systems")," (not to be confused with the Whisper sub-protocol) outlines ",(0,n.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/x3dh/#the-x3dh-protocol"},"in their documentation")," with the following exceptions:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Status does not publish one-time keys ",(0,n.kt)("inlineCode",{parentName:"li"},"OPK")," or perform DH including them, because there are no central servers in the Status implementation."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A client MUST create X3DH prekey bundles, each defined by the following items:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Identity Key: ",(0,n.kt)("inlineCode",{parentName:"li"},"IK")),(0,n.kt)("li",{parentName:"ul"},"Signed prekey: ",(0,n.kt)("inlineCode",{parentName:"li"},"SPK")),(0,n.kt)("li",{parentName:"ul"},"Prekey signature: ",(0,n.kt)("inlineCode",{parentName:"li"},"Sig(IK, Encode(SPK))")),(0,n.kt)("li",{parentName:"ul"},"Timestamp"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"These bundles are made available in a variety of ways, as defined in section 2.1."))),(0,n.kt)("h2",{id:"account-broadcasting"},"Account Broadcasting"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A user is responsible for broadcasting certain information publicly so that others may contact them.")),(0,n.kt)("h3",{id:"x3dh-prekey-bundles"},"X3DH Prekey bundles"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A client SHOULD regenerate a new X3DH prekey bundle every 24 hours.  This MAY be done in a lazy way, such that a client that does not come online past this time period does not regenerate or broadcast bundles."),(0,n.kt)("li",{parentName:"ul"},"The current bundle SHOULD be broadcast on a Whisper/Waku topic specific to his Identity Key, ",(0,n.kt)("inlineCode",{parentName:"li"},"{IK}-contact-code"),", intermittently.  This MAY be done every 6 hours."),(0,n.kt)("li",{parentName:"ul"},"A bundle SHOULD accompany every message sent."),(0,n.kt)("li",{parentName:"ul"},"TODO: retrieval of long-time offline users bundle via ",(0,n.kt)("inlineCode",{parentName:"li"},"{IK}-contact-code"))),(0,n.kt)("h2",{id:"optional-account-additions"},"Optional Account additions"),(0,n.kt)("h3",{id:"ens-username"},"ENS Username"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A user MAY register a public username on the Ethereum Name System (ENS).  This username is a user-chosen subdomain of the ",(0,n.kt)("inlineCode",{parentName:"li"},"stateofus.eth")," ENS registration that maps to their Whisper/Waku identity key (",(0,n.kt)("inlineCode",{parentName:"li"},"IK"),").")),(0,n.kt)("h2",{id:"trust-establishment"},"Trust establishment"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Trust establishment deals with users verifying they are communicating with who they think they are.")),(0,n.kt)("h3",{id:"terms-glossary"},"Terms Glossary"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"term"),(0,n.kt)("th",{parentName:"tr",align:null},"description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"privkey"),(0,n.kt)("td",{parentName:"tr",align:null},"ECDSA secp256k1 private key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"pubkey"),(0,n.kt)("td",{parentName:"tr",align:null},"ECDSA secp256k1 public key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Whisper/Waku key"),(0,n.kt)("td",{parentName:"tr",align:null},"pubkey for chat with HD derivation path m/43'/60'/1581'/0'/0")))),(0,n.kt)("h3",{id:"contact-discovery"},"Contact Discovery"),(0,n.kt)("h4",{id:"public-channels"},"Public channels"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Public group channels in Status are a broadcast/subscription system.  All public messages are encrypted with a symmetric key derived from the channel name, ",(0,n.kt)("inlineCode",{parentName:"li"},"K_{pub,sym}"),", which is publicly known."),(0,n.kt)("li",{parentName:"ul"},"A public group channel's symmetric key MUST creation must follow the ",(0,n.kt)("a",{parentName:"li",href:"https://web3js.readthedocs.io/en/1.0/web3-shh.html#generatesymkeyfrompassword"},"web3 API"),"'s ",(0,n.kt)("inlineCode",{parentName:"li"},"web3.ssh.generateSymKeyFromPassword")," function"),(0,n.kt)("li",{parentName:"ul"},"In order to post to a public group channel, a client MUST have a valid account created."),(0,n.kt)("li",{parentName:"ul"},"In order to listen to a public group channel, a client must subscribe to the channel name.\nThe sender of a message is derived from the message's signature."),(0,n.kt)("li",{parentName:"ul"},"Discovery of channel names is not currently part of the protocol, and is typically done out of band.\nIf a channel name is used that has not been used, it will be created."),(0,n.kt)("li",{parentName:"ul"},"A client MUST sign the message otherwise it will be discarded by the recipients."),(0,n.kt)("li",{parentName:"ul"},"channel name specification:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"matches ",(0,n.kt)("inlineCode",{parentName:"li"},"[a-z0-9\\-]")),(0,n.kt)("li",{parentName:"ul"},"is not a public key")))),(0,n.kt)("h4",{id:"private-11-messages"},"Private 1:1 messages"),(0,n.kt)("p",null,"This can be done in the following ways:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"scanning a user generated QR code"),(0,n.kt)("li",{parentName:"ol"},"discovery through the Status app"),(0,n.kt)("li",{parentName:"ol"},"asynchronous X3DH key exchange"),(0,n.kt)("li",{parentName:"ol"},"public key via public channel listening",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"status-mobile/src/status_im/contact_code/core.cljs")))),(0,n.kt)("li",{parentName:"ol"},"contact codes"),(0,n.kt)("li",{parentName:"ol"},"decentralized storage (not implemented)"),(0,n.kt)("li",{parentName:"ol"},"Whisper/Waku")),(0,n.kt)("h3",{id:"initial-key-exchange"},"Initial Key Exchange"),(0,n.kt)("h4",{id:"bundles"},"Bundles"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"An X3DH prekey bundle is defined as (",(0,n.kt)("a",{parentName:"p",href:"https://github.com/status-im/status-go/messaging/chat/protobuf/encryption.pb.go"},"code"),"):"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-golang"},"Identity                // Identity key\nSignedPreKeys           // a map of installation id to array of signed prekeys by that installation id\nSignature               // Prekey signature\nTimestamp               // When the bundle was lasted created locally\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"include BundleContainer"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a new bundle SHOULD be created at least every 12 hours")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a node only generates a bundle when it is used")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a bundle SHOULD be distributed on the contact code channel. This is the Whisper and Waku topic ",(0,n.kt)("inlineCode",{parentName:"p"},"{IK}-contact-code"),",\nwhere ",(0,n.kt)("inlineCode",{parentName:"p"},"IK")," is the hex encoded public key of the user, prefixed with ",(0,n.kt)("inlineCode",{parentName:"p"},"0x"),".\nThe node encrypts the channel in the same way it encrypted public chats."))),(0,n.kt)("h3",{id:"contact-verification"},"Contact Verification"),(0,n.kt)("p",null,"To verify that contact key information is as it should be, use the following."),(0,n.kt)("h4",{id:"identicon"},"Identicon"),(0,n.kt)("p",null,"A low-poly identicon is deterministically generated from the Whisper/Waku chat public key.\nThis can be compared out of band to ensure the receiver's public key is the one stored locally."),(0,n.kt)("h4",{id:"3-word-pseudonym--whisperwaku-key-fingerprint"},"3 word pseudonym / Whisper/Waku key fingerprint"),(0,n.kt)("p",null,"Status generates a deterministic 3-word random pseudonym from the Whisper/Waku chat public key.\nThis pseudonym acts as a human readable fingerprint to the Whisper/Waku chat public key.\nThis name also shows when viewing a contact's public profile and in the chat UI."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"implementation: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/status-mobile/tree/develop/src/status_im/utils/gfycat"},"gfycat"))),(0,n.kt)("h4",{id:"ens-name"},"ENS name"),(0,n.kt)("p",null,"Status offers the ability to register a mapping of a human readable subdomain of ",(0,n.kt)("inlineCode",{parentName:"p"},"stateofus.eth")," to their Whisper/Waku chat public key.\nThe user purchases this registration (currently by staking 10 SNT)\nand the node stores it on the Ethereum mainnet blockchain for public lookup."),(0,n.kt)("h2",{id:"public-key-serialization"},"Public Key Serialization"),(0,n.kt)("p",null,'Idiomatically known as "public key compression" and "public key decompression".'),(0,n.kt)("p",null,"The node SHOULD provide functionality for the serialization and deserialization of public / chat keys."),(0,n.kt)("p",null,"For maximum flexibility, when implementing this functionality, the node MUST support public keys encoded in a range of encoding formats, detailed below."),(0,n.kt)("h3",{id:"basic-serialization-example"},"Basic Serialization Example"),(0,n.kt)("p",null,"In the example of a typical hexadecimal encoded elliptical curve (EC) public key (such as a secp256k1 pk),"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"0x04261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc3cd4e22200c68daf7493e1f8da6a190a68a671e2d3977809612424c7c3888bc6\n")),(0,n.kt)("p",null,"minor modification for compatibility and flexibility makes the key self-identifiable and easily parsable,"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"fe70104261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc3cd4e22200c68daf7493e1f8da6a190a68a671e2d3977809612424c7c3888bc6\n")),(0,n.kt)("p",null,"EC serialization and compact encoding produces a much smaller string representation of the original key."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"zQ3shPyZJnxZK4Bwyx9QsaksNKDYTPmpwPvGSjMYVHoXHeEgB\n")),(0,n.kt)("h3",{id:"public-key-compression-rationale"},'Public Key "Compression" Rationale'),(0,n.kt)("p",null,'Serialized and compactly encoded ("compressed") public keys have a number of UI / UX advantages\nover non-serialized less densely encoded public keys.'),(0,n.kt)("p",null,'Compressed public keys are smaller, and users may perceive them as less intimidating and less unnecessarily large.\nCompare the "compressed" and "uncompressed" version of the same public key from above example:'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"0xe70104261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc3cd4e22200c68daf7493e1f8da6a190a68a671e2d3977809612424c7c3888bc6")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"zQ3shPyZJnxZK4Bwyx9QsaksNKDYTPmpwPvGSjMYVHoXHeEgB"))),(0,n.kt)("p",null,"The user can transmit and share the same data, but at one third of the original size.\n136 characters uncompressed vs 49 characters compressed, giving a significant character length reduction of 64%."),(0,n.kt)("p",null,"The user client app MAY use the compressed public keys throughout the user interface.\nFor example in the ",(0,n.kt)("inlineCode",{parentName:"p"},"status-mobile")," implementation of the user interface\nthe following places could take advantage of a significantly smaller public key:  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Onboarding")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"Choose a chat name")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Profile")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"Header")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Profile")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"Share icon")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"QR code popover")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Invite friends")," url from ",(0,n.kt)("inlineCode",{parentName:"li"},"Invite friends")," button and ",(0,n.kt)("inlineCode",{parentName:"li"},"+ -button")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"Invite friends")),(0,n.kt)("li",{parentName:"ul"},"Other user ",(0,n.kt)("inlineCode",{parentName:"li"},"Profile details")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Profile details")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"Share icon")," ",">"," ",(0,n.kt)("inlineCode",{parentName:"li"},"QR code popover"))),(0,n.kt)("p",null,"In the case of QR codes a compressed public key can reduce the complexity of the derived codes:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Uncompressed"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("img",{parentName:"td",src:"https://github.com/vacp2p/rfc-index/blob/main/status/deprecated/images/qr-code1-accountmd.png?raw=true",alt:"image"}))))),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Compressed"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("img",{parentName:"td",src:"https://github.com/vacp2p/rfc-index/blob/main/status/deprecated/images/qr-code2-accountmd.png?raw=true",alt:"image"}))))),(0,n.kt)("h3",{id:"key-encoding"},"Key Encoding"),(0,n.kt)("p",null,"When implementing the pk de/serialization functionality, the node MUST use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/multiformats/multibase"},"multiformats/multibase"),"\nencoding protocol to interpret incoming key data and to return key data in a desired encoding."),(0,n.kt)("p",null,"The node SHOULD support the following ",(0,n.kt)("inlineCode",{parentName:"p"},"multibase")," encoding formats."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csv"},"encoding,          code, description,                                              status\nidentity,          0x00, 8-bit binary (encoder and decoder keeps data unmodified), default\nbase2,             0,    binary (01010101),                                        candidate\nbase8,             7,    octal,                                                    draft\nbase10,            9,    decimal,                                                  draft\nbase16,            f,    hexadecimal,                                              default\nbase16upper,       F,    hexadecimal,                                              default\nbase32hex,         v,    rfc4648 case-insensitive - no padding - highest char,     candidate\nbase32hexupper,    V,    rfc4648 case-insensitive - no padding - highest char,     candidate\nbase32hexpad,      t,    rfc4648 case-insensitive - with padding,                  candidate\nbase32hexpadupper, T,    rfc4648 case-insensitive - with padding,                  candidate\nbase32,            b,    rfc4648 case-insensitive - no padding,                    default\nbase32upper,       B,    rfc4648 case-insensitive - no padding,                    default\nbase32pad,         c,    rfc4648 case-insensitive - with padding,                  candidate\nbase32padupper,    C,    rfc4648 case-insensitive - with padding,                  candidate\nbase32z,           h,    z-base-32 (used by Tahoe-LAFS),                           draft\nbase36,            k,    base36 [0-9a-z] case-insensitive - no padding,            draft\nbase36upper,       K,    base36 [0-9a-z] case-insensitive - no padding,            draft\nbase58btc,         z,    base58 bitcoin,                                           default\nbase58flickr,      Z,    base58 flicker,                                           candidate\nbase64,            m,    rfc4648 no padding,                                       default\nbase64pad,         M,    rfc4648 with padding - MIME encoding,                     candidate\nbase64url,         u,    rfc4648 no padding,                                       default\nbase64urlpad,      U,    rfc4648 with padding,                                     default\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note")," this specification RECOMMENDs that implementations extend the standard ",(0,n.kt)("inlineCode",{parentName:"p"},"multibase")," protocol\nto parse strings prepended with ",(0,n.kt)("inlineCode",{parentName:"p"},"0x")," as ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," hexadecimal encoded bytes."),(0,n.kt)("p",null,"Implementing this recommendation will allow the node to correctly interpret traditionally identified hexadecimal strings (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"0x1337c0de"),")."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Example:")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"0xe70102261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc")),(0,n.kt)("p",null,"SHOULD be interpreted as"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"fe70102261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc")),(0,n.kt)("p",null,"This specification RECOMMENDs that the consuming service of the node uses a compact encoding type,\nsuch as base64 or base58 to allow for as short representations of the key as possible."),(0,n.kt)("h3",{id:"public-key-types"},"Public Key Types"),(0,n.kt)("p",null,"When implementing the pk de/serialization functionality, The node MUST support the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/multiformats/multicodec"},"multiformats/multicodec")," key type identifiers for the following public key type."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Tag"),(0,n.kt)("th",{parentName:"tr",align:null},"Code"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"secp256k1-pub")),(0,n.kt)("td",{parentName:"tr",align:null},"key"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"0xe7")),(0,n.kt)("td",{parentName:"tr",align:null},"Secp256k1 public key")))),(0,n.kt)("p",null,"For a public key to be identifiable to the node the public key data MUST be prepended with the relevant ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/multiformats/unsigned-varint"},"multiformats/unsigned-varint")," formatted code."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Example:")),(0,n.kt)("p",null,"Below is a representation of an deserialized secp256k1 public key."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"04\n26 | 1c | 55 | 67 | 5e | 55 | ff | 25\ned | b5 | 0b | 34 | 5c | fb | 3a | 3f\n35 | f6 | 07 | 12 | d2 | 51 | cb | aa\nab | 97 | bd | 50 | 05 | 4c | 6e | bc\n3c | d4 | e2 | 22 | 00 | c6 | 8d | af\n74 | 93 | e1 | f8 | da | 6a | 19 | 0a\n68 | a6 | 71 | e2 | d3 | 97 | 78 | 09\n61 | 24 | 24 | c7 | c3 | 88 | 8b | c6\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"multicodec")," code for a secp256k1 public key is ",(0,n.kt)("inlineCode",{parentName:"p"},"0xe7"),"."),(0,n.kt)("p",null,"After parsing the code ",(0,n.kt)("inlineCode",{parentName:"p"},"0xe7")," as a ",(0,n.kt)("inlineCode",{parentName:"p"},"multiformats/uvarint"),", the byte value is ",(0,n.kt)("inlineCode",{parentName:"p"},"0xe7 0x01"),", prepending this to the public key results in the below representation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"e7 | 01 | 04\n26 | 1c | 55 | 67 | 5e | 55 | ff | 25\ned | b5 | 0b | 34 | 5c | fb | 3a | 3f\n35 | f6 | 07 | 12 | d2 | 51 | cb | aa\nab | 97 | bd | 50 | 05 | 4c | 6e | bc\n3c | d4 | e2 | 22 | 00 | c6 | 8d | af\n74 | 93 | e1 | f8 | da | 6a | 19 | 0a\n68 | a6 | 71 | e2 | d3 | 97 | 78 | 09\n61 | 24 | 24 | c7 | c3 | 88 | 8b | c6\n")),(0,n.kt)("h3",{id:"deserialization-process-flow"},"De/Serialization Process Flow"),(0,n.kt)("p",null,"When implementing the pk de/serialization functionality, the node MUST be passed a ",(0,n.kt)("inlineCode",{parentName:"p"},"multicodec")," identified public key,\nof the above supported types, encoded with a valid ",(0,n.kt)("inlineCode",{parentName:"p"},"multibase")," identifier."),(0,n.kt)("p",null,"This specification RECOMMENDs that the node also accept an encoding type parameter to encode the output data.\nThis provides for the case where the user requires the de/serialization key to be in a different encoding to the encoding of the given key."),(0,n.kt)("h4",{id:"serialization-example"},"Serialization Example"),(0,n.kt)("p",null,"A hexadecimal encoded secp256k1 public chat key typically is represented as below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"0x04261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc3cd4e22200c68daf7493e1f8da6a190a68a671e2d3977809612424c7c3888bc6\n")),(0,n.kt)("p",null,"To be properly interpreted by the node for serialization the public key MUST be prepended with the ",(0,n.kt)("inlineCode",{parentName:"p"},"multicodec")," ",(0,n.kt)("inlineCode",{parentName:"p"},"uvarint")," code ",(0,n.kt)("inlineCode",{parentName:"p"},"0xea 0x01"),"\nand encoded with a valid ",(0,n.kt)("inlineCode",{parentName:"p"},"multibase")," encoding, therefore giving the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"fea0104261c55675e55ff25edb50b345cfb3a3f35f60712d251cbaaab97bd50054c6ebc3cd4e22200c68daf7493e1f8da6a190a68a671e2d3977809612424c7c3888bc6\n")),(0,n.kt)("p",null,"If adhering to the specification recommendation to provide the user with an output encoding parameter,\nthe above string would be passed to the node with the following ",(0,n.kt)("inlineCode",{parentName:"p"},"multibase")," encoding identifier."),(0,n.kt)("p",null,"In this example the output encoding is defined as ",(0,n.kt)("inlineCode",{parentName:"p"},"base58 bitcoin"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"z\n")),(0,n.kt)("p",null,"The return value in this case would be"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"zQ3shPyZJnxZK4Bwyx9QsaksNKDYTPmpwPvGSjMYVHoXHeEgB\n")),(0,n.kt)("p",null,"Which after ",(0,n.kt)("inlineCode",{parentName:"p"},"multibase")," decoding can be represented in bytes as below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"e7 | 01 | 02\n26 | 1c | 55 | 67 | 5e | 55 | ff | 25\ned | b5 | 0b | 34 | 5c | fb | 3a | 3f\n35 | f6 | 07 | 12 | d2 | 51 | cb | aa\nab | 97 | bd | 50 | 05 | 4c | 6e | bc\n")),(0,n.kt)("h4",{id:"deserialization-example"},"Deserialization Example"),(0,n.kt)("p",null,"For the user, the deserialization process is exactly the same as serialization with the exception\nthat the user MUST provide a serialized public key for deserialization. Else the deserialization algorithm will fail."),(0,n.kt)("p",null,"For further guidance on the implementation of public key de/serialization consult the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/status-im/status-go/blob/c9772325f2dca76b3504191c53313663ca2efbe5/api/utils_test.go"},(0,n.kt)("inlineCode",{parentName:"a"},"status-go")," implementation and tests"),".  "),(0,n.kt)("h2",{id:"security-considerations"},"Security Considerations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"})),(0,n.kt)("h2",{id:"changelog"},"Changelog"),(0,n.kt)("h3",{id:"version-04"},"Version 0.4"),(0,n.kt)("p",null,"Released ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/status-im/specs/commit/e98a9b76b7d4e1ce93e0b692e1521c2d54f72c59"},"June 24, 2020")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Added details of public key serialization and deserialization")),(0,n.kt)("h3",{id:"version-03"},"Version 0.3"),(0,n.kt)("p",null,"Released ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Added language to include Waku in all relevant places"),(0,n.kt)("li",{parentName:"ul"},"Change to keep ",(0,n.kt)("inlineCode",{parentName:"li"},"Mailserver")," term consistent"),(0,n.kt)("li",{parentName:"ul"},"Added clarification to Open Whisper Systems")),(0,n.kt)("h2",{id:"copyright"},"Copyright"),(0,n.kt)("p",null,"Copyright and related rights waived via ",(0,n.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki"},"BIP43")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"},"BIP39")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1581.md"},"EIP1581")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP44")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Signal_Messenger#2013%E2%80%932018:_Open_Whisper_Systems"},"Open Whisper Systems")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://signal.org/docs/specifications/x3dh/#the-x3dh-protocol"},"X3DH")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://web3js.readthedocs.io/en/1.0/web3-shh.html#generatesymkeyfrompassword"},"web3 API")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/status-go/messaging/chat/protobuf/encryption.pb.go"},"Protobuf encryption")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/status-mobile/tree/develop/src/status_im/utils/gfycat"},"gfycat in Status")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/multiformats/"},"multiformats")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/status-go/blob/c9772325f2dca76b3504191c53313663ca2efbe5/api/utils_test.go"},"status-go implementation and tests")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/commit/e98a9b76b7d4e1ce93e0b692e1521c2d54f72c59"},"June 24, 2020 change commit")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020 change commit"))))}d.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),p=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=n,h=u["".concat(o,".").concat(m)]||u[m]||d[m]||l;return a?i.createElement(h,r(r({ref:t},c),{},{components:a})):i.createElement(h,r({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var p=2;p<l;p++)r[p]=a[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);