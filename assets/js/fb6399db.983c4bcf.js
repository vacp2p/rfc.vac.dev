"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[4267],{83514:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var n=a(87462),i=(a(67294),a(3905));const s={title:"61/STATUS-Community-History-Service",name:"Status Community History Service",status:"draft",category:"Standards Track",description:"Explains how new members of a Status community can request historical messages from archive nodes.",editor:"r4bbit &lt;r4bbit@status.im&gt;",contributors:["Sanaz Taheri &lt;sanaz@status.im&gt;","John Lea &lt;john@status.im&gt;"]},r=void 0,o={unversionedId:"61/community-history-service",id:"61/community-history-service",title:"61/STATUS-Community-History-Service",description:"Explains how new members of a Status community can request historical messages from archive nodes.",source:"@site/status/61/community-history-service.md",sourceDirName:"61",slug:"/61/community-history-service",permalink:"/status/61/community-history-service",draft:!1,tags:[],version:"current",frontMatter:{title:"61/STATUS-Community-History-Service",name:"Status Community History Service",status:"draft",category:"Standards Track",description:"Explains how new members of a Status community can request historical messages from archive nodes.",editor:"r4bbit &lt;r4bbit@status.im&gt;",contributors:["Sanaz Taheri &lt;sanaz@status.im&gt;","John Lea &lt;john@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"56/STATUS-COMMUNITIES",permalink:"/status/56/communities"},next:{title:"62/STATUS-PAYLOADS",permalink:"/status/62/payloads"}},l={},m=[{value:"Abstract",id:"abstract",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Requirements / Assumptions",id:"requirements--assumptions",level:2},{value:"Overview",id:"overview",level:2},{value:"Serving community history archives",id:"serving-community-history-archives",level:3},{value:"Serving archives for missed messages",id:"serving-archives-for-missed-messages",level:3},{value:"Receiving community history archives",id:"receiving-community-history-archives",level:3},{value:"Storing live messages",id:"storing-live-messages",level:2},{value:"Exporting messages for bundling",id:"exporting-messages-for-bundling",level:3},{value:"Message history archives",id:"message-history-archives",level:2},{value:"WakuMessageHistoryArchive",id:"wakumessagehistoryarchive",level:3},{value:"Message History Archive Index",id:"message-history-archive-index",level:2},{value:"WakuMessageArchiveIndex",id:"wakumessagearchiveindex",level:3},{value:"Creating message archive torrents",id:"creating-message-archive-torrents",level:2},{value:"Ensuring reproducible data pieces",id:"ensuring-reproducible-data-pieces",level:3},{value:"<strong>Example: Without padding</strong>",id:"example-without-padding",level:4},{value:"<strong>Example: With padding</strong>",id:"example-with-padding",level:4},{value:"Seeding message history archives",id:"seeding-message-history-archives",level:3},{value:"Creating magnet links",id:"creating-magnet-links",level:3},{value:"Message archive distribution",id:"message-archive-distribution",level:3},{value:"Canonical message histories",id:"canonical-message-histories",level:3},{value:"Fetching message history archives",id:"fetching-message-history-archives",level:2},{value:"Downloading message archives",id:"downloading-message-archives",level:3},{value:"Storing historical messages",id:"storing-historical-messages",level:3},{value:"Considerations",id:"considerations",level:2},{value:"Control node honesty",id:"control-node-honesty",level:2},{value:"Bandwidth consumption",id:"bandwidth-consumption",level:2},{value:"Multiple community owners",id:"multiple-community-owners",level:2},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],d={toc:m};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Status: draft"),(0,i.kt)("li",{parentName:"ul"},"Category: Standards Track"),(0,i.kt)("li",{parentName:"ul"},"Editor: r4bbit ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:r4bbit@status.im"},"r4bbit@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Contributors:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sanaz Taheri ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:sanaz@status.im"},"sanaz@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"John Lea ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:john@status.im"},"john@status.im"),">")))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"Messages are stored permanently by store nodes\n(",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE"),")\nfor up to a certain configurable period of time,\nlimited by the overall storage provided by a store node.\nMessages older than that period are no longer provided by store nodes,\nmaking it impossible for other nodes to request historical messages\nthat go beyond that time range.\nThis raises issues in the case of Status communities,\nwhere recently joined members of a community\nare not able to request complete message histories of the community channels."),(0,i.kt)("p",null,"This specification describes how ",(0,i.kt)("strong",{parentName:"p"},"Control Nodes"),"\n(which are specific nodes in Status communities)\narchive historical message data of their communities,\nbeyond the time range limit provided by Store Nodes using\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://bittorrent.org"},"BitTorrent")," protocol.\nIt also describes how the archives are distributed to community members via\nthe Status network,\nso they can fetch them and gain access to a complete message history."),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("p",null,"The following terminology is used throughout this specification.\nNotice that some actors listed here are nodes that operate in Waku networks only,\nwhile others operate in the Status communities layer):"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"References"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Waku node"),(0,i.kt)("td",{parentName:"tr",align:null},"An Waku node (",(0,i.kt)("a",{parentName:"td",href:"../../waku/standards/core/10/waku2"},"10/WAKU2"),") that implements ",(0,i.kt)("a",{parentName:"td",href:"../../waku/standards/core/11/relay"},"11/WAKU2-RELAY"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Store node"),(0,i.kt)("td",{parentName:"tr",align:null},"A Waku node that implements ",(0,i.kt)("a",{parentName:"td",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Waku network"),(0,i.kt)("td",{parentName:"tr",align:null},"A group of Waku nodes forming a graph, connected via ",(0,i.kt)("a",{parentName:"td",href:"../../waku/standards/core/11/relay"},"11/WAKU2-RELAY"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Status user"),(0,i.kt)("td",{parentName:"tr",align:null},"An Status account that is used in a Status consumer product, such as Status Mobile or Status Desktop")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Status node"),(0,i.kt)("td",{parentName:"tr",align:null},"A Status client run by a Status application")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Control node"),(0,i.kt)("td",{parentName:"tr",align:null},"A Status node that owns the private key for a Status community")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Community member"),(0,i.kt)("td",{parentName:"tr",align:null},"A Status user that is part of a Status community, not owning the private key of the community")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Community member node"),(0,i.kt)("td",{parentName:"tr",align:null},"A Status node with message archive capabilities enabled, run by a community member")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Live messages"),(0,i.kt)("td",{parentName:"tr",align:null},"Waku messages received through the Waku network")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BitTorrent client"),(0,i.kt)("td",{parentName:"tr",align:null},"A program implementing the ",(0,i.kt)("a",{parentName:"td",href:"https://bittorrent.org"},"BitTorrent")," protocol")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Torrent/Torrent file"),(0,i.kt)("td",{parentName:"tr",align:null},"A file containing metadata about data to be downloaded by BitTorrent clients")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Magnet link"),(0,i.kt)("td",{parentName:"tr",align:null},"A link encoding the metadata provided by a torrent file (",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Magnet_URI_scheme"},"Magnet URI scheme"),")")))),(0,i.kt)("h2",{id:"requirements--assumptions"},"Requirements / Assumptions"),(0,i.kt)("p",null,"This specification has the following assumptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Store nodes,\n(",(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE"),"),\nare available 24/7 ensuring constant live message availability."),(0,i.kt)("li",{parentName:"ul"},"The storage time range limit is 30 days."),(0,i.kt)("li",{parentName:"ul"},"Store nodes have enough storage to persist historical messages for up to 30 days."),(0,i.kt)("li",{parentName:"ul"},"No store nodes have storage to persist historical messages older than 30 days."),(0,i.kt)("li",{parentName:"ul"},"All nodes are honest."),(0,i.kt)("li",{parentName:"ul"},"The network is reliable.")),(0,i.kt)("p",null,"Furthermore, it assumes that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control nodes have enough storage to persist historical messages\nolder than 30 days."),(0,i.kt)("li",{parentName:"ul"},"Control nodes provide archives with historical messages ",(0,i.kt)("strong",{parentName:"li"},"at least")," every 30 days."),(0,i.kt)("li",{parentName:"ul"},"Control nodes receive all community messages."),(0,i.kt)("li",{parentName:"ul"},"Control nodes are honest."),(0,i.kt)("li",{parentName:"ul"},"Control nodes know at least one store node from which it can query historical messages.")),(0,i.kt)("p",null,"These assumptions are less than ideal and will be enhanced in future work.\nThis ",(0,i.kt)("a",{parentName:"p",href:"https://forum.vac.dev/t/status-communities-protocol-and-product-point-of-view/114"},"forum discussion"),"\nprovides more details."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The following is a high-level overview of the user flow and\nfeatures this specification describes.\nFor more detailed descriptions, read the dedicated sections in this specification."),(0,i.kt)("h3",{id:"serving-community-history-archives"},"Serving community history archives"),(0,i.kt)("p",null,"Control nodes go through the following\n(high level) process to provide community members with message histories:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Community owner creates a Status community\n(previously known as ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/pull/151"},"org channels"),")\nwhich makes its node a Control node."),(0,i.kt)("li",{parentName:"ol"},"Community owner enables message archive capabilities\n(on by default but can be turned off as well - see ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/feature-specs/pull/36"},"UI feature spec"),")."),(0,i.kt)("li",{parentName:"ol"},"A special type of channel to exchange metadata about the archival data is created,\nthis channel is not visible in the user interface."),(0,i.kt)("li",{parentName:"ol"},"Community owner invites community members."),(0,i.kt)("li",{parentName:"ol"},"Control node receives messages published in channels and\nstores them into a local database."),(0,i.kt)("li",{parentName:"ol"},"After 7 days, the control node exports and\ncompresses last 7 days worth of messages from database and\nbundles it together with a\n",(0,i.kt)("a",{parentName:"li",href:"#wakumessagearchiveindex"},"message archive index")," into a torrent,\nfrom which it then creates a magnet link (",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Magnet_URI_scheme"},"Magnet URI scheme"),",\n",(0,i.kt)("a",{parentName:"li",href:"https://www.bittorrent.org/beps/bep_0009.html"},"Extensions for Peers to Send Metadata Files"),")."),(0,i.kt)("li",{parentName:"ol"},"Control node sends the magnet link created in step 6 to community members via\nspecial channel created in step 3 through the Waku network."),(0,i.kt)("li",{parentName:"ol"},"Every subsequent 7 days,\nsteps 6 and 7 are repeated and\nthe new message archive data\nis appended to the previously created message archive data.")),(0,i.kt)("h3",{id:"serving-archives-for-missed-messages"},"Serving archives for missed messages"),(0,i.kt)("p",null,'If the control node goes offline\n(where "offline" means, the control node\'s main process is no longer running),\nit MUST go through the following process:'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Control node restarts"),(0,i.kt)("li",{parentName:"ol"},"Control node requests messages from store nodes\nfor the missed time range for all channels in their community"),(0,i.kt)("li",{parentName:"ol"},"All missed messages are stored into control node's local message database"),(0,i.kt)("li",{parentName:"ol"},"If 7 or more days have elapsed since the last message history torrent was created,\nthe control node will perform step 6 and\n7 of ",(0,i.kt)("a",{parentName:"li",href:"#serving-community-history-archives"},"Serving community history archives"),"\nfor every 7 days worth of messages in the missed time range\n(e.g. if the node was offline for 30 days, it will create 4 message history archives)")),(0,i.kt)("h3",{id:"receiving-community-history-archives"},"Receiving community history archives"),(0,i.kt)("p",null,"Community member nodes go through the following (high level) process to fetch and\nrestore community message histories:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"User joins community and becomes community member (see ",(0,i.kt)("a",{parentName:"li",href:"../56/communities"},"org channels spec"),")"),(0,i.kt)("li",{parentName:"ol"},"By joining a community,\nmember nodes automatically subscribe to special channel for\nmessage archive metadata exchange provided by the community"),(0,i.kt)("li",{parentName:"ol"},"Member node requests live message history\n(last 30 days) of all the community channels,\nincluding the special channel from store nodes"),(0,i.kt)("li",{parentName:"ol"},"Member node receives Waku message\n(",(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/14/message"},"14/WAKU2-MESSAGE"),")\nthat contains the metadata magnet link from the special channel"),(0,i.kt)("li",{parentName:"ol"},"Member node extracts the magnet link from the Waku message and\npasses it to torrent client"),(0,i.kt)("li",{parentName:"ol"},"Member node downloads\n",(0,i.kt)("a",{parentName:"li",href:"#message-history-archive-index"},"message archive index")," file and\ndetermines which message archives are not downloaded yet (all or some)"),(0,i.kt)("li",{parentName:"ol"},"Member node fetches missing message archive data via torrent"),(0,i.kt)("li",{parentName:"ol"},"Member node unpacks and\ndecompresses message archive data to then hydrate its local database,\ndeleting any messages,\nfor that community that the database previously stored in the same time range,\nas covered by the message history archive")),(0,i.kt)("h2",{id:"storing-live-messages"},"Storing live messages"),(0,i.kt)("p",null,"For archival data serving, the control node MUST store live messages as ",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/14/message"},"14/WAKU2-MESSAGE"),".\nThis is in addition to their database of application messages.\nThis is required to provide confidentiality, authenticity,\nand integrity of message data distributed via the BitTorrent layer, and\nlater validated by community members when they unpack message history archives."),(0,i.kt)("p",null,"Control nodes SHOULD remove those messages from their local databases\nonce they are older than 30 days and\nafter they have been turned into message archives and\ndistributed to the BitTorrent network."),(0,i.kt)("h3",{id:"exporting-messages-for-bundling"},"Exporting messages for bundling"),(0,i.kt)("p",null,"Control nodes export Waku messages from their local database for creating and\nbundling history archives using the following criteria:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Waku messages to be exported MUST have a ",(0,i.kt)("inlineCode",{parentName:"li"},"contentTopic"),"\nthat match any of the topics of the community channels"),(0,i.kt)("li",{parentName:"ul"},"Waku messages to be exported MUST have a ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp"),"\nthat lies within a time range of 7 days")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," is determined by the context in which the control node attempts\nto create a message history archives as described below:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The control node attempts to create an archive periodically\nfor the past seven days (including the current day).\nIn this case, the ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," has to lie within those 7 days."),(0,i.kt)("li",{parentName:"ol"},"The control node has been offline\n(control node's main process has stopped and needs restart) and\nattempts to create archives for all the live messages it has missed\nsince it went offline.\nIn this case,\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," has to lie within the day the latest message was received and\nthe current day.")),(0,i.kt)("p",null,"Exported messages MUST be restored as\n",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/14/message"},"14/WAKU2-MESSAGE")," for bundling.\nWaku messages that are older than 30 days and\nhave been exported for bundling can be removed from the control node's database\n(control nodes still maintain a database of application messages)."),(0,i.kt)("h2",{id:"message-history-archives"},"Message history archives"),(0,i.kt)("p",null,"Message history archives are represented as ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive")," and\ncreated from Waku messages exported from the local database.\nMessage history archives are implemented using the following protocol buffer."),(0,i.kt)("h3",{id:"wakumessagehistoryarchive"},"WakuMessageHistoryArchive"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," field SHOULD contain a timestamp of the time range's lower bound.\nThe type parallels the ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," of ",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/14/message"},"WakuMessage"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," field SHOULD contain a timestamp of the time range's the higher bound."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"contentTopic")," field MUST contain a list of all communiity channel topics."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"messages")," field MUST contain all messages that belong into the archive\ngiven its ",(0,i.kt)("inlineCode",{parentName:"p"},"from"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"contentTopic")," fields."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"padding")," field MUST contain the amount of zero bytes needed so\nthat the overall byte size of the protobuf encoded ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),"\nis a multiple of the ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength")," used to divide the message archive data into pieces.\nThis is needed for seamless encoding and\ndecoding of archival data in interation with BitTorrent,\nas explained in ",(0,i.kt)("a",{parentName:"p",href:"#creating-message-archive-torrents"},"creating message archive torrents"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3"\n\nmessage WakuMessageArchiveMetadata {\n  uint8 version = 1\n  uint64 from = 2\n  uint64 to = 3\n  repeated string contentTopic = 4\n}\n\nmessage WakuMessageArchive {\n  uint8 version = 1\n  WakuMessageArchiveMetadata metadata = 2\n  repeated WakuMessage messages = 3 // `WakuMessage` is provided by 14/WAKU2-MESSAGE\n  bytes padding = 4\n}\n')),(0,i.kt)("h2",{id:"message-history-archive-index"},"Message History Archive Index"),(0,i.kt)("p",null,"Control nodes MUST provide message archives for the entire community history.\nThe entirey history consists of a set of ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),"'s\nwhere each archive contains a subset of historical ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessage"),"s\nfor a time range of seven days.\nAll the ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),"s are concatenated into a single file as a byte string\n(see ",(0,i.kt)("a",{parentName:"p",href:"#ensuring-reproducible-data-pieces"},"Ensuring reproducible data pieces"),")."),(0,i.kt)("p",null,"Control nodes MUST create a message history archive index\n(",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndex"),") with metadata that allows receiving nodes\nto only fetch the message history archives they are interested in."),(0,i.kt)("h3",{id:"wakumessagearchiveindex"},"WakuMessageArchiveIndex"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndex")," is a map where the key is the KECCAK-256 hash of\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndexMetadata")," derived from a 7-day archive and\nthe value is an instance of that ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndexMetadata"),"\ncorresponding to that archive."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," field MUST contain the position at which the message history archive\nstarts in the byte string of the total message archive data.\nThis MUST be the sum of the length of all previously created message archives\nin bytes (see ",(0,i.kt)("a",{parentName:"p",href:"#creating-message-archive-torrents"},"Creating message archive torrents"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3"\n\nmessage WakuMessageArchiveIndexMetadata {\n  uint8 version = 1\n  WakuMessageArchiveMetadata metadata = 2\n  uint64 offset = 3\n  uint64 num_pieces = 4\n}\n\nmessage WakuMessageArchiveIndex {\n  map<string, WakuMessageArchiveIndexMetadata> archives = 1\n}\n')),(0,i.kt)("p",null,"The control node MUST update the ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndex"),"\nevery time it creates one or\nmore ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),"s and bundle it into a new torrent.\nFor every created ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),",\nthere MUST be a ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndexMetadata")," entry in the ",(0,i.kt)("inlineCode",{parentName:"p"},"archives")," field ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndex"),"."),(0,i.kt)("h2",{id:"creating-message-archive-torrents"},"Creating message archive torrents"),(0,i.kt)("p",null,'Control nodes MUST create a torrent file ("torrent")\ncontaining metadata to all message history archives.\nTo create a torrent file, and\nlater serve the message archive data in the BitTorrent network,\ncontrol nodes MUST store the necessary data in dedicated files on the file system.'),(0,i.kt)("p",null,"A torrent's source folder MUST contain the following two files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data")," - Contains all protobuf encoded ",(0,i.kt)("inlineCode",{parentName:"li"},"WakuMessageArchive"),"'s (as bit strings)\nconcatenated in ascending order based on their time"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index")," - Contains the protobuf encoded ",(0,i.kt)("inlineCode",{parentName:"li"},"WakuMessageArchiveIndex"))),(0,i.kt)("p",null,"Control nodes SHOULD store these files in a dedicated folder that is identifiable,\nvia the community id."),(0,i.kt)("h3",{id:"ensuring-reproducible-data-pieces"},"Ensuring reproducible data pieces"),(0,i.kt)("p",null,"The control node MUST ensure that the byte string resulting from\nthe protobuf encoded ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," is equal to the byte string ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),"\nfrom the previously generated message archive torrent,\nplus the data of the latest 7 days worth of messages encoded as ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),".\nTherefore, the size of ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," grows every seven days as it's append only."),(0,i.kt)("p",null,"The control nodes also MUST ensure that the byte size of every individual ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),"\nencoded protobuf is a multiple of ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength: ???")," (",(0,i.kt)("strong",{parentName:"p"},"TODO"),")\nusing the ",(0,i.kt)("inlineCode",{parentName:"p"},"padding")," field.\nIf the protobuf encoded ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive")," is not a multiple of ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength"),",\nits ",(0,i.kt)("inlineCode",{parentName:"p"},"padding")," field MUST be filled with zero bytes and\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive")," MUST be re-encoded until its size becomes multiple of ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength"),"."),(0,i.kt)("p",null,"This is necessary because the content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," file\nwill be split into pieces of ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength")," when the torrent file is created,\nand the SHA1 hash of every piece is then stored in the torrent file and\nlater used by other nodes to request the data for each individual data piece."),(0,i.kt)("p",null,"By fitting message archives into a multiple of ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength")," and\nensuring they fill possible remaining space with zero bytes,\ncontrol nodes prevent the ",(0,i.kt)("strong",{parentName:"p"},"next")," message archive to\noccupy that remaining space of the last piece,\nwhich will result in a different SHA1 hash for that piece."),(0,i.kt)("h4",{id:"example-without-padding"},(0,i.kt)("strong",{parentName:"h4"},"Example: Without padding")),(0,i.kt)("p",null,"Let ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),' "A1" be of size 20 bytes:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"}," 0 11 22 33 44 55 66 77 88 99\n10 11 12 13 14 15 16 17 18 19 \n")),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength")," of 10 bytes, A1 will fit into ",(0,i.kt)("inlineCode",{parentName:"p"},"20 / 10 = 2")," pieces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"}," 0 11 22 33 44 55 66 77 88 99 // piece[0] SHA1: 0x123\n10 11 12 13 14 15 16 17 18 19 // piece[1] SHA1: 0x456\n")),(0,i.kt)("h4",{id:"example-with-padding"},(0,i.kt)("strong",{parentName:"h4"},"Example: With padding")),(0,i.kt)("p",null,"Let ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),' "A2" be of size 21 bytes:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"}," 0 11 22 33 44 55 66 77 88 99\n10 11 12 13 14 15 16 17 18 19\n20\n")),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"pieceLength")," of 10 bytes, A2 will fit into ",(0,i.kt)("inlineCode",{parentName:"p"},"21 / 10 = 2")," pieces.\nThe remainder will introduce a third piece:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"}," 0 11 22 33 44 55 66 77 88 99 // piece[0] SHA1: 0x123\n10 11 12 13 14 15 16 17 18 19 // piece[1] SHA1: 0x456\n20                            // piece[2] SHA1: 0x789\n")),(0,i.kt)("p",null,"The next ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive"),' "A3" will be appended ("#3") to the existing data\nand occupy the remaining space of the third data piece.\nThe piece at index 2 will now produce a different SHA1 hash:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"}," 0 11 22 33 44 55 66 77 88 99 // piece[0] SHA1: 0x123\n10 11 12 13 14 15 16 17 18 19 // piece[1] SHA1: 0x456\n20 #3 #3 #3 #3 #3 #3 #3 #3 #3 // piece[2] SHA1: 0xeef\n#3 #3 #3 #3 #3 #3 #3 #3 #3 #3 // piece[3]\n")),(0,i.kt)("p",null,"By filling up the remaining space of the third piece\nwith A2 using its ",(0,i.kt)("inlineCode",{parentName:"p"},"padding")," field,\nit is guaranteed that its SHA1 will stay the same:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"}," 0 11 22 33 44 55 66 77 88 99 // piece[0] SHA1: 0x123\n10 11 12 13 14 15 16 17 18 19 // piece[1] SHA1: 0x456\n20  0  0  0  0  0  0  0  0  0 // piece[2] SHA1: 0x999\n#3 #3 #3 #3 #3 #3 #3 #3 #3 #3 // piece[3]\n#3 #3 #3 #3 #3 #3 #3 #3 #3 #3 // piece[4]\n")),(0,i.kt)("h3",{id:"seeding-message-history-archives"},"Seeding message history archives"),(0,i.kt)("p",null,"The control node MUST seed the\n",(0,i.kt)("a",{parentName:"p",href:"#creating-message-archive-torrents"},"generated torrent"),"\nuntil a new ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchive")," is created."),(0,i.kt)("p",null,"The control node SHOULD NOT seed torrents for older message history archives.\nOnly one torrent at a time should be seeded."),(0,i.kt)("h3",{id:"creating-magnet-links"},"Creating magnet links"),(0,i.kt)("p",null,"Once a torrent file for all message archives is created,\nthe control node MUST derive a magnet link following the\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Magnet_URI_scheme"},"Magnet URI scheme"),"\nusing the underlying BitTorrent protocol client."),(0,i.kt)("h3",{id:"message-archive-distribution"},"Message archive distribution"),(0,i.kt)("p",null,"Message archives are available via the BitTorrent network as they are being\n",(0,i.kt)("a",{parentName:"p",href:"#seeding-message-history-archives"},"seeded by the control node"),".\nOther community member nodes will download the message archives\nfrom the BitTorrent network once they receive a magnet link\nthat contains a message archive index."),(0,i.kt)("p",null,"The control node MUST send magnet links containing message archives and\nthe message archive index to a special community channel.\nThe topic of that special channel follows the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/{application-name}/{version-of-the-application}/{content-topic-name}/{encoding}\n")),(0,i.kt)("p",null,"All messages sent with this topic MUST be instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationMetadataMessage"),"\n(",(0,i.kt)("a",{parentName:"p",href:"../62/payloads"},"62/STATUS-PAYLOADS"),") with a ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunityMessageArchiveIndex"),"."),(0,i.kt)("p",null,"Only the control node MAY post to the special channel.\nOther messages on this specified channel MUST be ignored by clients.\nCommunity members MUST NOT have permission to send messages to the special channel.\nHowever, community member nodes MUST subscribe to special channel\nto receive Waku messages containing magnet links for message archives."),(0,i.kt)("h3",{id:"canonical-message-histories"},"Canonical message histories"),(0,i.kt)("p",null,"Only control nodes are allowed to distribute messages with magnet links via\nthe special channel for magnet link exchange.\nCommunity members MUST NOT be allowed to post any messages to the special channel."),(0,i.kt)("p",null,"Status nodes MUST ensure that any message\nthat isn't signed by the control node in the special channel is ignored."),(0,i.kt)("p",null,"Since the magnet links are created from the control node's database\n(and previously distributed archives),\nthe message history provided by the control node becomes the canonical message history\nand single source of truth for the community."),(0,i.kt)("p",null,"Community member nodes MUST replace messages in their local databases\nwith the messages extracted from archives within the same time range.\nMessages that the control node didn't receive MUST be removed and\nare no longer part of the message history of interest,\neven if it already existed in a community member node's database."),(0,i.kt)("h2",{id:"fetching-message-history-archives"},"Fetching message history archives"),(0,i.kt)("p",null,"Generally, fetching message history archives is a three step process:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Receive ",(0,i.kt)("a",{parentName:"li",href:"#message-history-archive-index"},"message archive index"),"\nmagnet link as described in ","[Message archive distribution]",",\ndownload ",(0,i.kt)("inlineCode",{parentName:"li"},"index")," file from torrent, then determine which message archives to download"),(0,i.kt)("li",{parentName:"ol"},"Download individual archives")),(0,i.kt)("p",null,"Community member nodes subscribe to the special channel\nthat control nodes publish magnet links for message history archives to.\nThere are two scenarios in which member nodes can receive such a magnet link message\nfrom the special channel:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The member node receives it via live messages, by listening to the special channel"),(0,i.kt)("li",{parentName:"ol"},"The member node requests messages for a time range of up to 30 days\nfrom store nodes (this is the case when a new community member joins a community)")),(0,i.kt)("h3",{id:"downloading-message-archives"},"Downloading message archives"),(0,i.kt)("p",null,"When member nodes receive a message with a ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunityMessageHistoryArchive"),"\n(",(0,i.kt)("a",{parentName:"p",href:"../62/payloads"},"62/STATUS-PAYLOADS"),") from the aforementioned channnel,\nthey MUST extract the ",(0,i.kt)("inlineCode",{parentName:"p"},"magnet_uri")," and\npass it to their underlying BitTorrent client\nso they can fetch the latest message history archive index,\nwhich is the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," file of the torrent (see ",(0,i.kt)("a",{parentName:"p",href:"#creating-message-archive-torrents"},"Creating message archive torrents"),")."),(0,i.kt)("p",null,'Due to the nature of distributed systems,\nthere\'s no guarantee that a received message is the "last" message.\nThis is especially true\nwhen member nodes request historical messages from store nodes.'),(0,i.kt)("p",null,"Therefore, member nodes MUST wait for 20 seconds\nafter receiving the last ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunityMessageArchive"),"\nbefore they start extracting the magnet link to fetch the latest archive index."),(0,i.kt)("p",null,"Once a message history archive index is downloaded and\nparsed back into ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndex"),",\ncommunity member nodes use a local lookup table\nto determine which of the listed archives are missing\nusing the KECCAK-256 hashes stored in the index."),(0,i.kt)("p",null,"For this lookup to work,\nmember nodes MUST store the KECCAK-256 hashes\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndexMetadata")," provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," file\nfor all of the message history archives that have been downlaoded\nin their local database."),(0,i.kt)("p",null,"Given a ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndex"),",\nmember nodes can access individual ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessageArchiveIndexMetadata"),"\nto download individual archives."),(0,i.kt)("p",null,"Community member nodes MUST choose one of the following options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Download all archives")," - Request and\ndownload all data pieces for ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," provided by the torrent\n(this is the case for new community member nodes\nthat haven't downloaded any archives yet)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Download only the latest archive")," -\nRequest and download all pieces starting at the ",(0,i.kt)("inlineCode",{parentName:"li"},"offset")," of the latest ",(0,i.kt)("inlineCode",{parentName:"li"},"WakuMessageArchiveIndexMetadata"),"\n(this the case for any member node\nthat already has downloaded all previous history and\nis now interested in only the latst archive)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Download specific archives")," -\nLook into ",(0,i.kt)("inlineCode",{parentName:"li"},"from")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"to")," fields of every ",(0,i.kt)("inlineCode",{parentName:"li"},"WakuMessageArchiveIndexMetadata")," and\ndetermine the pieces for archives of a specific time range\n(can be the case for member nodes that have recently joined the network and\nare only interested in a subset of the complete history)")),(0,i.kt)("h3",{id:"storing-historical-messages"},"Storing historical messages"),(0,i.kt)("p",null,"When message archives are fetched,\ncommunity member nodes MUST unwrap the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessage")," instances\ninto ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationMetadataMessage")," instances and store them in their local database.\nCommunity member nodes SHOULD NOT store the wrapped ",(0,i.kt)("inlineCode",{parentName:"p"},"WakuMessage")," messages."),(0,i.kt)("p",null,"All message within the same time range\nMUST be replaced with the messages provided by the message history archive."),(0,i.kt)("p",null,"Community members nodes MUST ignore the expiration state of each archive message."),(0,i.kt)("h2",{id:"considerations"},"Considerations"),(0,i.kt)("p",null,"The following are things to cosider when implementing this specification."),(0,i.kt)("h2",{id:"control-node-honesty"},"Control node honesty"),(0,i.kt)("p",null,"This spec assumes that all control nodes are honest and behave according to the spec.\nMeaning they don't inject their own messages into, or\nremove any messages from historic archives."),(0,i.kt)("h2",{id:"bandwidth-consumption"},"Bandwidth consumption"),(0,i.kt)("p",null,"Community member nodes will download the latest archive\nthey've received from the archive index,\nwhich includes messages from the last seven days.\nAssuming that community members nodes were online for that time range,\nthey have already downloaded that message data and\nwill now download an archive that contains the same."),(0,i.kt)("p",null,"This means there's a possibility member nodes\nwill download the same data at least twice."),(0,i.kt)("h2",{id:"multiple-community-owners"},"Multiple community owners"),(0,i.kt)("p",null,"It is possible for control nodes\nto export the private key of their owned community and\npass it to other users so they become control nodes as well.\nThis means, it's possible for multiple control nodes to exist."),(0,i.kt)("p",null,"This might conflict with the assumption that the control node\nserves as a single source of thruth.\nMultiple control nodes can have different message histories."),(0,i.kt)("p",null,"Not only will multiple control nodes\nmultiply the amount of archive index messages being distributed to the network,\nthey might also contain different sets of magnet links and their corresponding hashes."),(0,i.kt)("p",null,"Even if just a single message is missing in one of the histories,\nthe hashes presented in archive indices will look completely different,\nresulting in the community member node to download the corresponding archive\n(which might be identical to an archive that was already downloaded,\nexcept for that one message)."),(0,i.kt)("h2",{id:"copyright"},"Copyright"),(0,i.kt)("p",null,"Copyright and related rights waived via ",(0,i.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://bittorrent.org"},"BitTorrent")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/10/waku2"},"10/WAKU2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/11/relay"},"11/WAKU2-RELAY")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Magnet_URI_scheme"},"Magnet URI scheme")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://forum.vac.dev/t/status-communities-protocol-and-product-point-of-view/114"},"forum discussion")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/pull/151"},"org channels")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/feature-specs/pull/36"},"UI feature spec")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.bittorrent.org/beps/bep_0009.html"},"Extensions for Peers to Send Metadata Files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../56/communities"},"org channels spec")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/14/message"},"14/WAKU2-MESSAGE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../62/payloads"},"62/STATUS-PAYLOADS"))))}h.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>p});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=m(a),p=i,u=c["".concat(l,".").concat(p)]||c[p]||h[p]||s;return a?n.createElement(u,r(r({ref:t},d),{},{components:a})):n.createElement(u,r({ref:t},d))}));function p(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var m=2;m<s;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"}}]);