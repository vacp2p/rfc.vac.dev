"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[2531],{11879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const o={title:"56/STATUS-COMMUNITIES",name:"Status Communities that run over Waku v2",status:"draft",category:"Standards Track",description:"Status Communities allow multiple users to communicate in a discussion space. This is a key feature of the Status application.",editor:"Aaryamann Challani &lt;p1ge0nh8er@proton.me&gt;",contributors:["Andrea Piana &lt;andreap@status.im&gt;","Prem Chaitanya Prathi &lt;prem@waku.org&gt;"]},s=void 0,r={unversionedId:"56/communities",id:"56/communities",title:"56/STATUS-COMMUNITIES",description:"Status Communities allow multiple users to communicate in a discussion space. This is a key feature of the Status application.",source:"@site/status/56/communities.md",sourceDirName:"56",slug:"/56/communities",permalink:"/status/56/communities",draft:!1,tags:[],version:"current",frontMatter:{title:"56/STATUS-COMMUNITIES",name:"Status Communities that run over Waku v2",status:"draft",category:"Standards Track",description:"Status Communities allow multiple users to communicate in a discussion space. This is a key feature of the Status application.",editor:"Aaryamann Challani &lt;p1ge0nh8er@proton.me&gt;",contributors:["Andrea Piana &lt;andreap@status.im&gt;","Prem Chaitanya Prathi &lt;prem@waku.org&gt;"]},sidebar:"defaultSidebar",previous:{title:"55/STATUS-1TO1-CHAT",permalink:"/status/55/1to1-chat"},next:{title:"61/STATUS-Community-History-Service",permalink:"/status/61/community-history-service"}},m={},l=[{value:"Abstract",id:"abstract",level:2},{value:"Background and Motivation",id:"background-and-motivation",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Design Requirements",id:"design-requirements",level:2},{value:"Design",id:"design",level:2},{value:"Cryptographic Primitives",id:"cryptographic-primitives",level:3},{value:"Wire format",id:"wire-format",level:2},{value:"Functional scope and shard assignment",id:"functional-scope-and-shard-assignment",level:3},{value:"Content topic level encryption",id:"content-topic-level-encryption",level:3},{value:"Content topic usage",id:"content-topic-usage",level:3},{value:"Advertising a Community",id:"advertising-a-community",level:4},{value:"Community event messages",id:"community-event-messages",level:4},{value:"Community Requests",id:"community-requests",level:4},{value:"Community Shard Info",id:"community-shard-info",level:4},{value:"Community channels/chats",id:"community-channelschats",level:4},{value:"Community Management",id:"community-management",level:3},{value:"Community Creation Flow",id:"community-creation-flow",level:4},{value:"Community Join Flow (peer requests to join a Community)",id:"community-join-flow-peer-requests-to-join-a-community",level:4},{value:"Community Join Flow (peer is invited to join a Community)",id:"community-join-flow-peer-is-invited-to-join-a-community",level:4},{value:"Community Leave Flow",id:"community-leave-flow",level:4},{value:"Community Ban Flow",id:"community-ban-flow",level:4},{value:"Waku Protocols",id:"waku-protocols",level:3},{value:"Backups",id:"backups",level:3},{value:"Clock",id:"clock",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Future work",id:"future-work",level:2},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2},{value:"informative",id:"informative",level:3}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Status: draft"),(0,i.kt)("li",{parentName:"ul"},"Category: Standards Track"),(0,i.kt)("li",{parentName:"ul"},"Editor: Aaryamann Challani ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:p1ge0nh8er@proton.me"},"p1ge0nh8er@proton.me"),">"),(0,i.kt)("li",{parentName:"ul"},"Contributors:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Andrea Piana ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Prem Chaitanya Prathi ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:prem@waku.org"},"prem@waku.org"),">")))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"This document describes the design of Status Communities over Waku v2,\nallowing for multiple users to communicate in a discussion space.\nThis is a key feature for the Status messaging app."),(0,i.kt)("h2",{id:"background-and-motivation"},"Background and Motivation"),(0,i.kt)("p",null,"The purpose of Status communities, as specified in this document,\nis allowing for large group chats.\nCommunities can have further substructure, e.g. specific channels."),(0,i.kt)("p",null,"Smaller group chats, on the other hand,\nare out of scope for this document and\ncan be built over ",(0,i.kt)("a",{parentName:"p",href:"../55/1to1-chat"},"55/STATUS-1TO1-CHAT"),'.\nWe refer to these smaller group chats simply as "group chats",\nto differentiate them from Communities.'),(0,i.kt)("p",null,"For group chats based on ",(0,i.kt)("a",{parentName:"p",href:"../55/1to1-chat"},"55/STATUS-1TO1-CHAT"),",\nthe key exchange mechanism MUST be X3DH,\nas described in ",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/application/53/x3dh"},"53/WAKU2-X3DH"),"."),(0,i.kt)("p",null,"However, this method does not scale as the number of participants increases,\nfor the following reasons -"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The number of messages sent over the network increases with the number of participants."),(0,i.kt)("li",{parentName:"ol"},"Handling the X3DH key exchange for each participant is computationally expensive.")),(0,i.kt)("p",null,"Having multicast channels reduces the overhead of a group chat based on 1:1 chat.\nAdditionally, if all the participants of the group chat have a shared key,\nthen the number of messages sent over the network is reduced to one per message."),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Community"),": A group of peers that can communicate with each other."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Member"),": A peer that is part of a community."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Admin"),': A member that has administrative privileges.\nUsed interchangeably with "owner".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Channel"),': A designated subtopic for a community. Used interchangeably with "chat".')),(0,i.kt)("h2",{id:"design-requirements"},"Design Requirements"),(0,i.kt)("p",null,"Due to the nature of communities,\nthe following requirements are necessary for the design of communities  -"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The creator of the Community is the owner of the Community."),(0,i.kt)("li",{parentName:"ol"},"The Community owner is trusted."),(0,i.kt)("li",{parentName:"ol"},"The Community owner can add or remove members from the Community.\nThis extends to banning and kicking members."),(0,i.kt)("li",{parentName:"ol"},"The Community owner can add, edit and remove channels."),(0,i.kt)("li",{parentName:"ol"},"Community members can send/receive messages\nto the channels which they have access to."),(0,i.kt)("li",{parentName:"ol"},"Communities may be encrypted (private) or unencrypted (public)."),(0,i.kt)("li",{parentName:"ol"},"A Community is uniquely identified by a public key."),(0,i.kt)("li",{parentName:"ol"},"The public key of the Community is shared out of band."),(0,i.kt)("li",{parentName:"ol"},"The metadata of the Community can be found by listening on a content topic\nderived from the public key of the Community."),(0,i.kt)("li",{parentName:"ol"},"Community members run their own Waku nodes,\nwith the configuration described in ",(0,i.kt)("a",{parentName:"li",href:"#waku-protocols"},"Waku-Protocols"),".\nLight nodes solely implementing\n",(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/19/lightpush"},"19/WAKU2-LIGHTPUSH"),"\nmay not be able to run their own Waku node with the configuration described.")),(0,i.kt)("h2",{id:"design"},"Design"),(0,i.kt)("h3",{id:"cryptographic-primitives"},"Cryptographic Primitives"),(0,i.kt)("p",null,"The following cryptographic primitives are used in the design -"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"X3DH"),(0,i.kt)("li",{parentName:"ul"},"Single Ratchet",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The single ratchet is used to encrypt the messages sent to the Community."),(0,i.kt)("li",{parentName:"ul"},"The single ratchet is re-keyed when a member is added/removed from the Community.")))),(0,i.kt)("h2",{id:"wire-format"},"Wire format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\nmessage IdentityImage {\n  // payload is a context based payload for the profile image data,\n  // context is determined by the `source_type`\n  bytes payload = 1;\n  // source_type signals the image payload source\n  SourceType source_type = 2;\n  // image_type signals the image type and method of parsing the payload\n  ImageType image_type = 3;\n  // encryption_keys is a list of encrypted keys that can be used to decrypt an \n  // encrypted payload\n  repeated bytes encryption_keys = 4;\n  // encrypted signals the encryption state of the payload, default is false.\n  bool encrypted = 5;\n  // SourceType are the predefined types of image source allowed\n  enum SourceType {\n    UNKNOWN_SOURCE_TYPE = 0;\n\n    // RAW_PAYLOAD image byte data\n    RAW_PAYLOAD = 1;\n\n    // ENS_AVATAR uses the ENS record\'s resolver get-text-data.avatar data\n    // The `payload` field will be ignored if ENS_AVATAR is selected\n    // The application will read and \n    // parse the ENS avatar data as image payload data, URLs will be ignored\n    // The parent `ChatMessageIdentity` must have a valid `ens_name` set\n    ENS_AVATAR = 2;\n  }\n}\n\n// SocialLinks represents social link associated with given chat identity (personal/community)\nmessage SocialLink {\n  // Type of the social link\n  string text = 1;\n  // URL of the social link\n  string url = 2;\n}\n// ChatIdentity represents identity of a community/chat\nmessage ChatIdentity {\n  // Lamport timestamp of the message\n  uint64 clock = 1;\n  // ens_name is the valid ENS name associated with the chat key\n  string ens_name = 2;\n  // images is a string indexed mapping of images associated with an identity\n  map<string, IdentityImage> images = 3;\n  // display name is the user set identity\n  string display_name = 4;\n  // description is the user set description\n  string description = 5;\n  string color = 6;\n  string emoji = 7;\n  repeated SocialLink social_links = 8;\n  // first known message timestamp in seconds \n  // (valid only for community chats for now)\n  // 0 - unknown\n  // 1 - no messages\n  uint32 first_message_timestamp = 9;\n}\n\nmessage Grant {\n  // Community ID (The public key of the community)\n  bytes community_id = 1;\n  // The member ID (The public key of the member)\n  bytes member_id = 2;\n  // The chat for which the grant is given\n  string chat_id = 3;\n  // The Lamport timestamp of the grant\n  uint64 clock = 4;\n}\n\nmessage CommunityMember {\n  // The roles a community member MAY have\n  enum Roles {\n    UNKNOWN_ROLE = 0;\n    ROLE_ALL = 1;\n    ROLE_MANAGE_USERS = 2;\n    ROLE_MODERATE_CONTENT = 3;\n  }\n  repeated Roles roles = 1;\n}\n\nmessage CommunityPermissions {\n  // The type of access a community MAY have\n  enum Access {\n    UNKNOWN_ACCESS = 0;\n    NO_MEMBERSHIP = 1;\n    INVITATION_ONLY = 2;\n    ON_REQUEST = 3;\n  }\n\n  // If the community should be available only to ens users\n  bool ens_only = 1;\n  // If the community is private\n  bool private = 2;\n  Access access = 3;\n}\n\nmessage CommunityAdminSettings {\n  // If the Community admin may pin messages\n  bool pin_message_all_members_enabled = 1;\n}\n\nmessage CommunityChat {\n  // A map of members in the community to their roles in a chat\n  map<string,CommunityMember> members = 1;\n  // The permissions of the chat\n  CommunityPermissions permissions = 2;\n  // The metadata of the chat\n  ChatIdentity identity = 3;\n  // The category of the chat\n  string category_id = 4;\n  // The position of chat in the display\n  int32 position = 5;\n}\n\nmessage CommunityCategory {\n  // The category id \n  string category_id = 1;\n  // The name of the category\n  string name = 2;\n  // The position of the category in the display\n  int32 position = 3;\n}\n\nmessage CommunityInvitation {\n  // Encrypted/unencrypted community description\n  bytes community_description = 1;\n  // The grant offered by the community\n  bytes grant = 2;\n  // The chat id requested to join\n  string chat_id = 3;\n  // The public key of the community\n  bytes public_key = 4;\n}\n\nmessage CommunityRequestToJoin {\n  // The Lamport timestamp of the request  \n  uint64 clock = 1;\n  // The ENS name of the requester\n  string ens_name = 2;\n  // The chat id requested to join\n  string chat_id = 3;\n  // The public key of the community\n  bytes community_id = 4;\n  // The display name of the requester\n  string display_name = 5;\n}\n\nmessage CommunityCancelRequestToJoin {\n  // The Lamport timestamp of the request\n  uint64 clock = 1;\n  // The ENS name of the requester\n  string ens_name = 2;\n  // The chat id requested to join\n  string chat_id = 3;\n  // The public key of the community\n  bytes community_id = 4;\n  // The display name of the requester\n  string display_name = 5;\n  // Magnet uri for community history protocol\n  string magnet_uri = 6;\n}\n\nmessage CommunityRequestToJoinResponse {\n  // The Lamport timestamp of the request\n  uint64 clock = 1;\n  // The community description\n  CommunityDescription community = 2;\n  // If the request was accepted\n  bool accepted = 3;\n  // The grant offered by the community\n  bytes grant = 4;\n  // The community public key\n  bytes community_id = 5;\n}\n\nmessage CommunityRequestToLeave {\n  // The Lamport timestamp of the request\n  uint64 clock = 1;\n  // The community public key\n  bytes community_id = 2;\n}\n\nmessage CommunityDescription {\n  // The Lamport timestamp of the message\n  uint64 clock = 1;\n  // A mapping of members in the community to their roles\n  map<string,CommunityMember> members = 2;\n  // The permissions of the Community\n  CommunityPermissions permissions = 3;\n  // The metadata of the Community\n  ChatIdentity identity = 5;\n  // A mapping of chats to their details\n  map<string,CommunityChat> chats = 6;\n  // A list of banned members\n  repeated string ban_list = 7;\n  // A mapping of categories to their details\n  map<string,CommunityCategory> categories = 8;\n  // The admin settings of the Community\n  CommunityAdminSettings admin_settings = 10;\n  // If the community is encrypted\n  bool encrypted = 13;\n  // The list of tags\n  repeated string tags = 14;\n}\n')),(0,i.kt)("p",null,"Note: The usage of the clock is described in the ",(0,i.kt)("a",{parentName:"p",href:"#clock"},"Clock")," section."),(0,i.kt)("h3",{id:"functional-scope-and-shard-assignment"},"Functional scope and shard assignment"),(0,i.kt)("p",null,"We define two special ",(0,i.kt)("a",{parentName:"p",href:"../raw/status-app-protocols##functional-scope"},"functional scopes")," for messages related to Status Communities:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Global community control"),(0,i.kt)("li",{parentName:"ol"},"Global community content")),(0,i.kt)("p",null,"All messages that relate to controlling communities MUST be assigned the ",(0,i.kt)("em",{parentName:"p"},"global community control")," scope.\nAll messages that carry user-generated content for communities MUST be assigned the ",(0,i.kt)("em",{parentName:"p"},"global community content")," scope."),(0,i.kt)("p",null,">"," ",(0,i.kt)("em",{parentName:"p"},"Note:")," a previous iteration of Status Communities defined separate community-wide scopes for each community.\nHowever, this model was deprecated and all communities now operate on a global, shared scope.\nThis implies that different communities will share shards on the routing layer."),(0,i.kt)("p",null,"The following ",(0,i.kt)("a",{parentName:"p",href:"../raw/status-app-protocols##waku-transport-layer"},"Waku transport layer")," allocations are reserved for communities:\nAs per ",(0,i.kt)("a",{parentName:"p",href:"https://rfc.vac.dev/status/raw/simple-scaling/#relay-shards"},"STATUS-SIMPLE-SCALING"),", communities use the default cluster ID ",(0,i.kt)("inlineCode",{parentName:"p"},"16"),"\nset aside for all Status app protocols.\nWithin this cluster, the following ",(0,i.kt)("a",{parentName:"p",href:"../raw/status-app-protocols##pubsub-topics-and-sharding"},"shards")," are reserved for the community functional scopes:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"All messages with a ",(0,i.kt)("em",{parentName:"li"},"global community control")," scope MUST be published to shard ",(0,i.kt)("inlineCode",{parentName:"li"},"128")),(0,i.kt)("li",{parentName:"ol"},"All messages with a ",(0,i.kt)("em",{parentName:"li"},"global community content")," scope MUST be published to shard ",(0,i.kt)("inlineCode",{parentName:"li"},"256"))),(0,i.kt)("h3",{id:"content-topic-level-encryption"},"Content topic level encryption"),(0,i.kt)("p",null,"-a universal chat identifier is used for all community chats."),(0,i.kt)("p",null,"All messages are encrypted before they are handed over to waku ir-respective of the encryption explained above.\nAll community chats are encrypted using a symmetric key generated from universal chat id using pbkdf2."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"symKey = pbkdf2(password:universalChatID, salt:nil, iteration-count:65356,key-length:32, hash-func: random-sha256)\n")),(0,i.kt)("h3",{id:"content-topic-usage"},"Content topic usage"),(0,i.kt)("p",null,'"Content topic" refers to the field in ',(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/14/message#message-attributes"},"14/WAKU2-MESSAGE"),",\nfurther elaborated in ",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/10/waku2#overview-of-protocol-interaction"},"10/WAKU2"),".\nThe content-topic usage follows the guidelines specified at ",(0,i.kt)("a",{parentName:"p",href:"../../waku/informational/23/topics##content-topic-usage-guidelines"},"23/topics")),(0,i.kt)("h4",{id:"advertising-a-community"},"Advertising a Community"),(0,i.kt)("p",null,"The content topic that the community is advertised on\nMUST be derived from the public key of the community.\nThe content topic MUST be the first four bytes of the keccak-256 hash\nof the compressed (33 bytes) public key of the community encoded into a hex string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'hash = hex(keccak256(encodeToHex(compressedPublicKey)))\n\ntopicLen = 4\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\n\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n\ncontentTopic = "/waku/1/0x" + topic + "/rfc26"\n')),(0,i.kt)("h4",{id:"community-event-messages"},"Community event messages"),(0,i.kt)("p",null,"Message such as community description\nMUST be sent to the content topic derived from the public key of the community.\nThe content topic\nMUST be the hex-encoded keccak-256 hash of the public key of the community."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'hash = hex(keccak256(encodeToHex(publicKey)))\n\ntopicLen = 4\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n\ncontentTopic = "/waku/1/0x" + topic + "/rfc26"\n')),(0,i.kt)("h4",{id:"community-requests"},"Community Requests"),(0,i.kt)("p",null,"Requests to leave, join, kick and ban, as well as key exchange messages, MUST be sent to the content topic derived from the public key of the community on the common shard."),(0,i.kt)("p",null,"The content topic\nMUST be the keccak-256 hash of hex-encoded universal chat id (public key appended with fixed string) of the community omitting the first 2 bytes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'universalChatId = publicKey+"-memberUpdate"\nhash = hex(keccak256(encodeToHex(universalChatId))[2:])\n\ntopicLen = 4\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n\ncontentTopic = "/waku/1/0x" + topic + "/rfc26"\n')),(0,i.kt)("h4",{id:"community-shard-info"},"Community Shard Info"),(0,i.kt)("p",null,"If a community is assigned a dedicated shard then the shard info for that community is published on a content topic derived from a specialized key. This is useful for users joining the new community so that they can subscribe to this specific content topic."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'chatID = publicKey+"-shard-info"\nhash = hex(keccak256(encodeToHex(chatID))[2:])\n\ntopicLen = 4\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n\ncontentTopic = "/waku/1/0x" + topic + "/rfc26"\n')),(0,i.kt)("h4",{id:"community-channelschats"},"Community channels/chats"),(0,i.kt)("p",null,"All channels/chats shall use a single content-topic which is derived from a universal chat id irrespective of their individual unique chat ids."),(0,i.kt)("h3",{id:"community-management"},"Community Management"),(0,i.kt)("p",null,"The flows for Community management are as described below."),(0,i.kt)("h4",{id:"community-creation-flow"},"Community Creation Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The Community owner generates a public/private key pair."),(0,i.kt)("li",{parentName:"ol"},'The Community owner configures the Community metadata,\naccording to the wire format "CommunityDescription".'),(0,i.kt)("li",{parentName:"ol"},"The Community owner publishes the Community metadata on a content topic\nderived from the public key of the Community.\nthe Community metadata SHOULD be encrypted with the public key of the Community.\nThe Community metadata is sent during fixed intervals,\nto ensure that the Community metadata is available to members.\nThe Community metadata SHOULD be sent every time the Community metadata is updated."),(0,i.kt)("li",{parentName:"ol"},"The Community owner MAY advertise the Community out of band,\nby sharing the public key of the Community on other mediums of communication.")),(0,i.kt)("h4",{id:"community-join-flow-peer-requests-to-join-a-community"},"Community Join Flow (peer requests to join a Community)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A peer and the Community owner establish a 1:1 chat as described in ",(0,i.kt)("a",{parentName:"li",href:"../55/1to1-chat"},"55/STATUS-1TO1-CHAT"),"."),(0,i.kt)("li",{parentName:"ol"},'The peer requests to join a Community by sending a\n"CommunityRequestToJoin" message to the Community.\nAt this point, the peer MAY send a\n"CommunityCancelRequestToJoin" message to cancel the request.'),(0,i.kt)("li",{parentName:"ol"},"The Community owner MAY accept or reject the request."),(0,i.kt)("li",{parentName:"ol"},'If the request is accepted,\nthe Community owner sends a "CommunityRequestToJoinResponse" message to the peer.'),(0,i.kt)("li",{parentName:"ol"},"The Community owner then adds the member to the Community metadata, and\npublishes the updated Community metadata.")),(0,i.kt)("h4",{id:"community-join-flow-peer-is-invited-to-join-a-community"},"Community Join Flow (peer is invited to join a Community)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The Community owner and peer establish a 1:1 chat as described in ",(0,i.kt)("a",{parentName:"li",href:"../55/1to1-chat"},"55/STATUS-1TO1-CHAT"),"."),(0,i.kt)("li",{parentName:"ol"},'The peer is invited to join a Community by the Community owner,\nby sending a "CommunityInvitation" message.'),(0,i.kt)("li",{parentName:"ol"},'The peer decrypts the "CommunityInvitation" message, and verifies the signature.'),(0,i.kt)("li",{parentName:"ol"},'The peer requests to join a Community by sending a\n"CommunityRequestToJoin" message to the Community.'),(0,i.kt)("li",{parentName:"ol"},"The Community owner MAY accept or reject the request."),(0,i.kt)("li",{parentName:"ol"},'If the request is accepted,\nthe Community owner sends a "CommunityRequestToJoinResponse" message to the peer.'),(0,i.kt)("li",{parentName:"ol"},"The Community owner then adds the member to the Community metadata, and\npublishes the updated Community metadata.")),(0,i.kt)("h4",{id:"community-leave-flow"},"Community Leave Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'A member requests to leave a Community by sending a\n"CommunityRequestToLeave" message to the Community.'),(0,i.kt)("li",{parentName:"ol"},"The Community owner MAY accept or reject the request."),(0,i.kt)("li",{parentName:"ol"},"If the request is accepted,\nthe Community owner removes the member from the Community metadata,\nand publishes the updated Community metadata.")),(0,i.kt)("h4",{id:"community-ban-flow"},"Community Ban Flow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The Community owner adds a member to the ban list, revokes their grants,\nand publishes the updated Community metadata."),(0,i.kt)("li",{parentName:"ol"},"If the Community is Private,\nRe-keying is performed between the members of the Community,\nto ensure that the banned member is unable to decrypt any messages.")),(0,i.kt)("h3",{id:"waku-protocols"},"Waku Protocols"),(0,i.kt)("p",null,"The following Waku protocols SHOULD be used to implement Status Communities -"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/11/relay"},"11/WAKU2-RELAY")," -\nTo send and receive messages"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/application/53/x3dh"},"53/WAKU2-X3DH")," -\nTo encrypt and decrypt messages"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/application/54/x3dh-sessions"},"54/WAKU2-X3DH-SESSIONS"),"-\nTo handle session keys"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/14/message"},"14/WAKU2-MESSAGE")," -\nTo wrap community messages in a Waku message"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE")," -\nTo store and retrieve messages for offline devices")),(0,i.kt)("p",null,"The following Waku protocols MAY be used to implement Status Communities -"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/12/filter"},"12/WAKU2-FILTER")," -\nContent filtering for resource restricted devices"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/19/lightpush"},"19/WAKU2-LIGHTPUSH")," -\nAllows Light clients to participate in the network")),(0,i.kt)("h3",{id:"backups"},"Backups"),(0,i.kt)("p",null,"The member MAY back up their local settings,\nby encrypting it with their public key, and\nsending it to a given content topic.\nThe member MAY then rely on this backup to restore their local settings,\nin case of a data loss.\nThis feature relies on\n",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE"),"\nfor storing and retrieving messages."),(0,i.kt)("h3",{id:"clock"},"Clock"),(0,i.kt)("p",null,"The clock used in the wire format refers to the Lamport timestamp of the message.\nThe Lamport timestamp is a logical clock that is used to determine the order of events\nin a distributed system.\nThis allows ordering of messages in an asynchronous network\nwhere messages may be received out of order."),(0,i.kt)("h2",{id:"security-considerations"},"Security Considerations"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Community owner is a single point of failure.\nIf the Community owner is compromised, the Community is compromised.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Follows the same security considerations as the\n",(0,i.kt)("a",{parentName:"p",href:"../../waku/standards/application/53/x3dh"},"53/WAKU2-X3DH")," protocol."))),(0,i.kt)("h2",{id:"future-work"},"Future work"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"To scale and optimize the Community management,\nthe Community metadata should be stored on a decentralized storage system, and\nonly the references to the Community metadata should be broadcasted.\nThe following document describes this method in more detail -\n",(0,i.kt)("a",{parentName:"p",href:"https://hackmd.io/rD1OfIbJQieDe3GQdyCRTw"},"Optimizing the ",(0,i.kt)("inlineCode",{parentName:"a"},"CommunityDescription")," dissemination"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Token gating for communities")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Sharding the content topic used for ",(0,i.kt)("a",{parentName:"p",href:"#community-event-messages"},"#Community Event Messages"),",\nsince members of the community don't need to receive all the control messages."))),(0,i.kt)("h2",{id:"copyright"},"Copyright"),(0,i.kt)("p",null,"Copyright and related rights waived via ",(0,i.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../55/1to1-chat"},"55/STATUS-1TO1-CHAT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/application/53/x3dh"},"53/WAKU2-X3DH")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/19/lightpush"},"19/WAKU2-LIGHTPUSH")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/14/message"},"14/WAKU2-MESSAGE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/10/waku2"},"10/WAKU2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/11/relay"},"11/WAKU2-RELAY")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/application/54/x3dh-sessions"},"54/WAKU2-X3DH-SESSIONS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../waku/standards/core/12/filter"},"12/WAKU2-FILTER"))),(0,i.kt)("h3",{id:"informative"},"informative"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/status-go/blob/6072bd17ab1e5d9fc42cf844fcb8ad18aa07760c/protocol/communities/community.go"},"community.go")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/blob/403b5ce316a270565023fc6a1f8dec138819f4b0/docs/raw/organisation-channels.md"},"organisation-channels.md"))))}c.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=l(n),h=i,d=p["".concat(m,".").concat(h)]||p[h]||c[h]||o;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=p;var r={};for(var m in t)hasOwnProperty.call(t,m)&&(r[m]=t[m]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);