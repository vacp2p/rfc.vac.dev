"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[6824],{62158:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={title:"PAYLOADS",name:"Payloads",status:"deprecated",description:"Payload of messages in Status, regarding chat and chat-related use cases.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Adam Babik &lt;adam@status.im&gt;","Andrea Maria Piana &lt;andreap@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;"]},i=void 0,s={unversionedId:"deprecated/payloads",id:"deprecated/payloads",title:"PAYLOADS",description:"Payload of messages in Status, regarding chat and chat-related use cases.",source:"@site/status/deprecated/payloads.md",sourceDirName:"deprecated",slug:"/deprecated/payloads",permalink:"/status/deprecated/payloads",draft:!1,tags:[],version:"current",frontMatter:{title:"PAYLOADS",name:"Payloads",status:"deprecated",description:"Payload of messages in Status, regarding chat and chat-related use cases.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Adam Babik &lt;adam@status.im&gt;","Andrea Maria Piana &lt;andreap@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"NOTIFICATIONS",permalink:"/status/deprecated/notifications"},next:{title:"PUSH-NOTIFICATION-SERVER",permalink:"/status/deprecated/push-notification-server"}},o={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Payload wrapper",id:"payload-wrapper",level:2},{value:"Encoding",id:"encoding",level:2},{value:"Types of messages",id:"types-of-messages",level:2},{value:"Message",id:"message",level:3},{value:"Payload",id:"payload",level:4},{value:"Content types",id:"content-types",level:4},{value:"Mentions",id:"mentions",level:5},{value:"Sticker content type",id:"sticker-content-type",level:5},{value:"Message types",id:"message-types",level:4},{value:"Clock vs Timestamp and message ordering",id:"clock-vs-timestamp-and-message-ordering",level:4},{value:"Chats",id:"chats",level:4},{value:"Contact Update",id:"contact-update",level:3},{value:"Contact update",id:"contact-update-1",level:4},{value:"SyncInstallationContact",id:"syncinstallationcontact",level:3},{value:"SyncInstallationPublicChat",id:"syncinstallationpublicchat",level:3},{value:"PairInstallation",id:"pairinstallation",level:3},{value:"MembershipUpdateMessage and MembershipUpdateEvent",id:"membershipupdatemessage-and-membershipupdateevent",level:3},{value:"Upgradability",id:"upgradability",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Version 0.3",id:"version-03",level:3},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Status: deprecated"),(0,r.kt)("li",{parentName:"ul"},"Editor: Filip Dimitrijevic ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:filip@status.im"},"filip@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Contributors:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Adam Babik ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:adam@status.im"},"adam@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Andrea Maria Piana ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:oskar@status.im"},"oskar@status.im"),">")))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"This specification describes how the payload of each message in Status looks like.\nIt is primarily centered around chat and chat-related use cases."),(0,r.kt)("p",null,"The payloads aims to be flexible enough to support messaging but also cases\ndescribed in the ",(0,r.kt)("a",{parentName:"p",href:"https://status.im/whitepaper.pdf"},"Status Whitepaper"),"\nas well as various clients created using different technologies."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This document describes the payload format and some special considerations."),(0,r.kt)("h2",{id:"payload-wrapper"},"Payload wrapper"),(0,r.kt)("p",null,"The node wraps all payloads in a ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protobuf record"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message ApplicationMetadataMessage {\n  bytes signature = 1;\n  bytes payload = 2;\n\n  Type type = 3;\n\n  enum Type {\n    UNKNOWN = 0;\n    CHAT_MESSAGE = 1;\n    CONTACT_UPDATE = 2;\n    MEMBERSHIP_UPDATE_MESSAGE = 3;\n    PAIR_INSTALLATION = 4;\n    SYNC_INSTALLATION = 5;\n    REQUEST_ADDRESS_FOR_TRANSACTION = 6;\n    ACCEPT_REQUEST_ADDRESS_FOR_TRANSACTION = 7;\n    DECLINE_REQUEST_ADDRESS_FOR_TRANSACTION = 8;\n    REQUEST_TRANSACTION = 9;\n    SEND_TRANSACTION = 10;\n    DECLINE_REQUEST_TRANSACTION = 11;\n    SYNC_INSTALLATION_CONTACT = 12;\n    SYNC_INSTALLATION_ACCOUNT = 13;\n    SYNC_INSTALLATION_PUBLIC_CHAT = 14;\n    CONTACT_CODE_ADVERTISEMENT = 15;\n    PUSH_NOTIFICATION_REGISTRATION = 16;\n    PUSH_NOTIFICATION_REGISTRATION_RESPONSE = 17;\n    PUSH_NOTIFICATION_QUERY = 18;\n    PUSH_NOTIFICATION_QUERY_RESPONSE = 19;\n    PUSH_NOTIFICATION_REQUEST = 20;\n    PUSH_NOTIFICATION_RESPONSE = 21;\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"signature")," is the bytes of the signed ",(0,r.kt)("inlineCode",{parentName:"p"},"SHA3-256")," of the payload,\nsigned with the key of the author of the message.\nThe node needs the signature to validate authorship of the message,\nso that the message can be relayed to third parties.\nIf a signature is not present, but an author is provided by a layer below,\nthe message is not to be relayed to third parties, and it is considered plausibly deniable."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"payload")," is the protobuf encoded content of the message, with the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," set."),(0,r.kt)("h2",{id:"encoding"},"Encoding"),(0,r.kt)("p",null,"The node encodes the payload using ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers"},"Protobuf")),(0,r.kt)("h2",{id:"types-of-messages"},"Types of messages"),(0,r.kt)("h3",{id:"message"},"Message"),(0,r.kt)("p",null,"The type ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatMessage")," represents a chat message exchanged between clients."),(0,r.kt)("h4",{id:"payload"},"Payload"),(0,r.kt)("p",null,"The protobuf description is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message ChatMessage {\n  // Lamport timestamp of the chat message\n  uint64 clock = 1;\n  // Unix timestamps in milliseconds, currently not used as we use Whisper/Waku as more reliable, but here\n  // so that we don't rely on it\n  uint64 timestamp = 2;\n  // Text of the message\n  string text = 3;\n  // Id of the message that we are replying to\n  string response_to = 4;\n  // Ens name of the sender\n  string ens_name = 5;\n  // Chat id, this field is symmetric for public-chats and private group chats,\n  // but asymmetric in case of one-to-ones, as the sender will use the chat-id\n  // of the received, while the receiver will use the chat-id of the sender.\n  // Probably should be the concatenation of sender-pk & receiver-pk in alphabetical order\n  string chat_id = 6;\n\n  // The type of message (public/one-to-one/private-group-chat)\n  MessageType message_type = 7;\n  // The type of the content of the message\n  ContentType content_type = 8;\n\n  oneof payload {\n    StickerMessage sticker = 9;\n  }\n\n  enum MessageType {\n    UNKNOWN_MESSAGE_TYPE = 0;\n    ONE_TO_ONE = 1;\n    PUBLIC_GROUP = 2;\n    PRIVATE_GROUP = 3;\n    // Only local\n    SYSTEM_MESSAGE_PRIVATE_GROUP = 4;}\n  enum ContentType {\n    UNKNOWN_CONTENT_TYPE = 0;\n    TEXT_PLAIN = 1;\n    STICKER = 2;\n    STATUS = 3;\n    EMOJI = 4;\n    TRANSACTION_COMMAND = 5;\n    // Only local\n    SYSTEM_MESSAGE_CONTENT_PRIVATE_GROUP = 6;\n  }\n}\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"clock"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"The clock of the chat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"The sender timestamp at message creation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"text"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The content of the message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"response_to"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the message replied to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"ens_name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The ENS name of the user sending the message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"chat_id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The local ID of the chat the message is sent to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"message_type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MessageType")),(0,r.kt)("td",{parentName:"tr",align:null},"The type of message, different for one-to-one, public or group chats")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"content_type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ContentType")),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the content of the message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"payload"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Sticker\\|nil")),(0,r.kt)("td",{parentName:"tr",align:null},"The payload of the message based on the content type")))),(0,r.kt)("h4",{id:"content-types"},"Content types"),(0,r.kt)("p",null,"A node requires content types for a proper interpretation of incoming messages. Not each message is plain text but may carry different information."),(0,r.kt)("p",null,"The following content types MUST be supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TEXT_PLAIN")," identifies a message which content is a plaintext.")),(0,r.kt)("p",null,"There are other content types that MAY be implemented by the client:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"STICKER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"STATUS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EMOJI")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRANSACTION_COMMAND"))),(0,r.kt)("h5",{id:"mentions"},"Mentions"),(0,r.kt)("p",null,"A mention MUST be represented as a string with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@0xpk")," format, where ",(0,r.kt)("inlineCode",{parentName:"p"},"pk")," is the public key of the ",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/account"},"user account")," to be mentioned,\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"text")," field of a message with content_type ",(0,r.kt)("inlineCode",{parentName:"p"},"TEXT_PLAIN"),".\nA message MAY contain more than one mention.\nThis specification RECOMMENDs that the application does not require the user to enter the entire pk.\nThis specification RECOMMENDs that the application allows the user to create a mention\nby typing @ followed by the related ENS or 3-word pseudonym.\nThis specification RECOMMENDs that the application provides the user auto-completion functionality to create a mention.\nFor better user experience, the client SHOULD display a known ",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/account##contact-verification"},"ens name or the 3-word pseudonym corresponding to the key")," instead of the ",(0,r.kt)("inlineCode",{parentName:"p"},"pk"),"."),(0,r.kt)("h5",{id:"sticker-content-type"},"Sticker content type"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatMessage")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"STICKER")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Content/Type")," MUST also specify the ID of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pack")," and\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash")," of the pack, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sticker")," field of ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatMessage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message StickerMessage {\n  string hash = 1;\n  int32 pack = 2;\n}\n")),(0,r.kt)("h4",{id:"message-types"},"Message types"),(0,r.kt)("p",null,"A node requires message types to decide how to encrypt a particular message\nand what metadata needs to be attached when passing a message to the transport layer.\nFor more on this, see ",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/whisper-usage"},"WHISPER-USAGE"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/waku-usage"},"WAKU-USAGE"),"."),(0,r.kt)("p",null,"The following messages types MUST be supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ONE_TO_ONE")," is a message to the public group"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PUBLIC_GROUP")," is a private message"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PRIVATE_GROUP")," is a message to the private group.")),(0,r.kt)("h4",{id:"clock-vs-timestamp-and-message-ordering"},"Clock vs Timestamp and message ordering"),(0,r.kt)("p",null,"If a user sends a new message before the messages sent\nwhile the user was offline are received,\nthe newmessage is supposed to be displayed last in a chat.\nThis is where the basic algorithm of Lamport timestamp would fall short\nas it's only meant to order causally related events."),(0,r.kt)("p",null,'The status client therefore makes a "bid", speculating that it will beat the current chat-timestamp, s.t. the status client\'s\nLamport timestamp format is: ',(0,r.kt)("inlineCode",{parentName:"p"},"clock = max({timestamp}, chat_clock + 1)")),(0,r.kt)("p",null,"This will satisfy the Lamport requirement, namely: a -",">"," b then T(a) ","<"," T(b)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," MUST be Unix time calculated, when the node creates the message, in milliseconds.\nThis field SHOULD not be relied upon for message ordering."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"clock")," SHOULD be calculated using the algorithm of ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Lamport_timestamps"},"Lamport timestamps"),".\nWhen there are messages available in a chat,\nthe node calculates ",(0,r.kt)("inlineCode",{parentName:"p"},"clock"),"'s value based on the last received message in a particular chat: ",(0,r.kt)("inlineCode",{parentName:"p"},"max(timeNowInMs, last-message-clock-value + 1)"),".\nIf there are no messages, ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," is initialized with ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp"),"'s value."),(0,r.kt)("p",null,"Messages with a ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"120")," seconds over the Whisper/Waku timestamp SHOULD be discarded,\nin order to avoid malicious users to increase the ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," of a chat arbitrarily."),(0,r.kt)("p",null,"Messages with a ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," less than ",(0,r.kt)("inlineCode",{parentName:"p"},"120")," seconds under the Whisper/Waku timestamp\nmight indicate an attempt to insert messages in the chat history which is not distinguishable from a ",(0,r.kt)("inlineCode",{parentName:"p"},"datasync")," layer re-transit event.\nA client MAY mark this messages with a warning to the user, or discard them."),(0,r.kt)("p",null,"The node uses ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," value for the message ordering.\nThe algorithm used, and the distributed nature of the system produces casual ordering, which might produce counter-intuitive results in some edge cases.\nFor example, when a user joins a public chat and sends a message\nbefore receiving the exist messages, their message ",(0,r.kt)("inlineCode",{parentName:"p"},"clock")," value might be lower\nand the message will end up in the past when the historical messages are fetched."),(0,r.kt)("h4",{id:"chats"},"Chats"),(0,r.kt)("p",null,"Chat is a structure that helps organize messages.\nIt's usually desired to display messages only from a single recipient,\nor a group of recipients at a time and chats help to achieve that."),(0,r.kt)("p",null,"All incoming messages can be matched against a chat.\nThe below table describes how to calculate a chat ID for each message type."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Message Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Chat ID Calculation"),(0,r.kt)("th",{parentName:"tr",align:null},"Direction"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PUBLIC_GROUP"),(0,r.kt)("td",{parentName:"tr",align:null},"chat ID is equal to a public channel name; it should equal ",(0,r.kt)("inlineCode",{parentName:"td"},"chatId")," from the message"),(0,r.kt)("td",{parentName:"tr",align:null},"Incoming/Outgoing"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ONE_TO_ONE"),(0,r.kt)("td",{parentName:"tr",align:null},"let ",(0,r.kt)("inlineCode",{parentName:"td"},"P")," be a public key of the recipient; ",(0,r.kt)("inlineCode",{parentName:"td"},"hex-encode(P)")," is a chat ID; use it as ",(0,r.kt)("inlineCode",{parentName:"td"},"chatId")," value in the message"),(0,r.kt)("td",{parentName:"tr",align:null},"Outgoing"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user-message"),(0,r.kt)("td",{parentName:"tr",align:null},"let ",(0,r.kt)("inlineCode",{parentName:"td"},"P")," be a public key of message's signature; ",(0,r.kt)("inlineCode",{parentName:"td"},"hex-encode(P)")," is a chat ID; discard ",(0,r.kt)("inlineCode",{parentName:"td"},"chat-id")," from message"),(0,r.kt)("td",{parentName:"tr",align:null},"Incoming"),(0,r.kt)("td",{parentName:"tr",align:null},"if there is no matched chat, it might be the first message from public key ",(0,r.kt)("inlineCode",{parentName:"td"},"P"),"; the node MAY discard the message or MAY create a new chat; Status official clients create a new chat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PRIVATE_GROUP"),(0,r.kt)("td",{parentName:"tr",align:null},"use ",(0,r.kt)("inlineCode",{parentName:"td"},"chatId")," from the message"),(0,r.kt)("td",{parentName:"tr",align:null},"Incoming/Outgoing"),(0,r.kt)("td",{parentName:"tr",align:null},"find an existing chat by ",(0,r.kt)("inlineCode",{parentName:"td"},"chatId"),"; if none is found, the user is not a member of that chat or the user hasn't joined that chat, the message MUST be discarded")))),(0,r.kt)("h3",{id:"contact-update"},"Contact Update"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ContactUpdate")," is a message exchange to notify peers that either the\nuser has been added as a contact, or that information about the sending user have\nchanged."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message ContactUpdate {\n  uint64 clock = 1;\n  string ens_name = 2;\n  string profile_image = 3;\n}\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"clock"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"The clock of the chat with the user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"ens_name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The ENS name if set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"profile_image"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The base64 encoded profile picture of the user")))),(0,r.kt)("h4",{id:"contact-update-1"},"Contact update"),(0,r.kt)("p",null,"A client SHOULD send a ",(0,r.kt)("inlineCode",{parentName:"p"},"ContactUpdate")," to all the contacts each time:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ens_name has changed"),(0,r.kt)("li",{parentName:"ul"},"A user edits the profile image")),(0,r.kt)("p",null,"A client SHOULD also periodically send a ",(0,r.kt)("inlineCode",{parentName:"p"},"ContactUpdate")," to all the contacts, the interval is up to the client,\nthe Status official client sends these updates every 48 hours."),(0,r.kt)("h3",{id:"syncinstallationcontact"},"SyncInstallationContact"),(0,r.kt)("p",null,"The node uses ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncInstallationContact")," messages to synchronize in a best-effort the contacts to other devices."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message SyncInstallationContact {\n  uint64 clock = 1;\n  string id = 2;\n  string profile_image = 3;\n  string ens_name = 4;\n  uint64 last_updated = 5;\n  repeated string system_tags = 6;\n}\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"clock"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"clock value of the chat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"id of the contact synced")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"profile_image"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"base64")," encoded profile picture of the user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"ens_name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"ENS name of the contact")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array[string]")),(0,r.kt)("td",{parentName:"tr",align:null},"Array of ",(0,r.kt)("inlineCode",{parentName:"td"},"system_tags")," for the user, this can currently be: ",(0,r.kt)("inlineCode",{parentName:"td"},'":contact/added", ":contact/blocked", ":contact/request-received"')),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"syncinstallationpublicchat"},"SyncInstallationPublicChat"),(0,r.kt)("p",null,"The node uses ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncInstallationPublicChat")," message to synchronize in a best-effort the public chats to other devices."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message SyncInstallationPublicChat {\n  uint64 clock = 1;\n  string id = 2;\n}\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"clock"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"clock value of the chat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"id of the chat synced")))),(0,r.kt)("h3",{id:"pairinstallation"},"PairInstallation"),(0,r.kt)("p",null,"The node uses ",(0,r.kt)("inlineCode",{parentName:"p"},"PairInstallation")," messages to propagate information about a device to its paired devices."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PairInstallation {\n  uint64 clock = 1;\n  string installation_id = 2;\n  string device_type = 3;\n  string name = 4;\n}\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"clock"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"clock value of the chat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"installation_id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"A randomly generated id that identifies this device")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"device_type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The OS of the device ",(0,r.kt)("inlineCode",{parentName:"td"},"ios"),",",(0,r.kt)("inlineCode",{parentName:"td"},"android")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"desktop"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The self-assigned name of the device")))),(0,r.kt)("h3",{id:"membershipupdatemessage-and-membershipupdateevent"},"MembershipUpdateMessage and MembershipUpdateEvent"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MembershipUpdateEvent")," is a message used to propagate information about group membership changes in a group chat.\nThe details are in the ",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/group-chat"},"Group chats specs"),"."),(0,r.kt)("h2",{id:"upgradability"},"Upgradability"),(0,r.kt)("p",null,"There are two ways to upgrade the protocol without breaking compatibility:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A node always supports accretion"),(0,r.kt)("li",{parentName:"ul"},"A node does not support deletion of existing fields or messages, which might break compatibility")),(0,r.kt)("h2",{id:"security-considerations"},"Security Considerations"),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("h3",{id:"version-03"},"Version 0.3"),(0,r.kt)("p",null,"Released ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Added language to include Waku in all relevant places")),(0,r.kt)("h2",{id:"copyright"},"Copyright"),(0,r.kt)("p",null,"Copyright and related rights waived via ",(0,r.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://status.im/whitepaper.pdf"},"Status Whitepaper"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protobuf record"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers"},"Protobuf"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/account"},"Status user account"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"deprecated/account/#contact-verification"},"ens name or the 3-word pseudonym corresponding to the key"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/whisper-usage"},"WHISPER-USAGE"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/waku-usage"},"WAKU-USAGE"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Lamport_timestamps"},"Lamport timestamps"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/group-chat"},"Group chats specs"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020 change commit")))}m.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,h=u["".concat(o,".").concat(c)]||u[c]||m[c]||l;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);