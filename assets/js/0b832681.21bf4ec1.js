"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[2862],{90833:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={title:"GROUP-CHAT",name:"Group Chat",status:"deprecated",description:"This document describes the group chat protocol used by the Status application.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Andrea Piana &lt;andreap@status.im&gt;"]},l=void 0,d={unversionedId:"deprecated/group-chat",id:"deprecated/group-chat",title:"GROUP-CHAT",description:"This document describes the group chat protocol used by the Status application.",source:"@site/status/deprecated/group-chat.md",sourceDirName:"deprecated",slug:"/deprecated/group-chat",permalink:"/status/deprecated/group-chat",draft:!1,tags:[],version:"current",frontMatter:{title:"GROUP-CHAT",name:"Group Chat",status:"deprecated",description:"This document describes the group chat protocol used by the Status application.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Andrea Piana &lt;andreap@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"ETHEREUM-USAGE",permalink:"/status/deprecated/ethereum-usage"},next:{title:"Keycard Usage for Wallet and Chat Keys",permalink:"/status/deprecated/keycard-usage-for-wallet-and-chat-keys"}},o={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Membership updates",id:"membership-updates",level:2},{value:"Payload",id:"payload",level:3},{value:"Chat ID",id:"chat-id",level:3},{value:"Signature",id:"signature",level:3},{value:"Group membership event",id:"group-membership-event",level:3},{value:"CHAT_CREATED",id:"chat_created",level:4},{value:"NAME_CHANGED",id:"name_changed",level:4},{value:"MEMBERS_ADDED",id:"members_added",level:4},{value:"MEMBER_JOINED",id:"member_joined",level:4},{value:"ADMINS_ADDED",id:"admins_added",level:4},{value:"MEMBER_REMOVED",id:"member_removed",level:4},{value:"ADMIN_REMOVED",id:"admin_removed",level:4},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],s={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Status: deprecated"),(0,r.kt)("li",{parentName:"ul"},"Editor: Filip Dimitrijevic ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:filip@status.im"},"filip@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Contributors:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Andrea Piana ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">")))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"This document describes the group chat protocol used by the Status application.\nThe node uses pairwise encryption among members so a message is exchanged",(0,r.kt)("br",{parentName:"p"}),"\n","between each participant, similarly to a one-to-one message."),(0,r.kt)("h2",{id:"membership-updates"},"Membership updates"),(0,r.kt)("p",null,"The node uses membership updates messages to propagate group chat membership changes.\nThe protobuf format is described in the ",(0,r.kt)("a",{parentName:"p",href:"/status/deprecated/payloads"},"PAYLOADS"),".\nBelow describes each specific field."),(0,r.kt)("p",null,"The protobuf messages are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// MembershipUpdateMessage is a message used to propagate information\n// about group membership changes.\nmessage MembershipUpdateMessage {\n  // The chat id of the private group chat\n  string chat_id = 1;\n  // A list of events for this group chat, first 65 bytes are the signature, then is a \n  // protobuf encoded MembershipUpdateEvent\n  repeated bytes events = 2;\n  // An optional chat message\n  ChatMessage message = 3;\n}\n\nmessage MembershipUpdateEvent {\n  // Lamport timestamp of the event as described in [Status Payload Specs](status-payload-specs##clock-vs-timestamp-and-message-ordering)\n  uint64 clock = 1;\n  // List of public keys of the targets of the action\n  repeated string members = 2;\n  // Name of the chat for the CHAT_CREATED/NAME_CHANGED event types\n  string name = 3;\n  // The type of the event\n  EventType type = 4;\n\n  enum EventType {\n    UNKNOWN = 0;\n    CHAT_CREATED = 1; // See [CHAT_CREATED](#chat-created)\n    NAME_CHANGED = 2; // See [NAME_CHANGED](#name-changed)\n    MEMBERS_ADDED = 3; // See [MEMBERS_ADDED](#members-added)\n    MEMBER_JOINED = 4; // See [MEMBER_JOINED](#member-joined)\n    MEMBER_REMOVED = 5; // See [MEMBER_REMOVED](#member-removed)\n    ADMINS_ADDED = 6; // See [ADMINS_ADDED](#admins-added)\n    ADMIN_REMOVED = 7; // See [ADMIN_REMOVED](#admin-removed)\n  }\n}\n")),(0,r.kt)("h3",{id:"payload"},"Payload"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MembershipUpdateMessage"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"chat-id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The chat id of the chat where the change is to take place")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"events"),(0,r.kt)("td",{parentName:"tr",align:null},"See details"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of events that describe the membership changes, in their encoded protobuf form")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ChatMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"An optional message, described in ",(0,r.kt)("a",{parentName:"td",href:"/status/deprecated/payloads#message"},"Message"))))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MembershipUpdateEvent"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"clock"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"The clock value of the event")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"members"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"An optional list of hex encoded (prefixed with ",(0,r.kt)("inlineCode",{parentName:"td"},"0x"),") public keys, the targets of the action")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"An optional name, for those events that make use of it")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"EventType")),(0,r.kt)("td",{parentName:"tr",align:null},"The type of event sent, described below")))),(0,r.kt)("h3",{id:"chat-id"},"Chat ID"),(0,r.kt)("p",null,"Each membership update MUST be sent with a corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId"),".\nThe format of this chat ID MUST be a string of ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc4122"},"UUID"),",\nconcatenated with the hex-encoded public key of the creator of the chat, joined by ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),".\nThis chatId MUST be validated by all clients, and MUST be discarded if it does not follow these rules."),(0,r.kt)("h3",{id:"signature"},"Signature"),(0,r.kt)("p",null,"The node calculates the signature for each event by encoding each ",(0,r.kt)("inlineCode",{parentName:"p"},"MembershipUpdateEvent")," in its protobuf representation\nand prepending the bytes of the chatID, lastly the node signs the ",(0,r.kt)("inlineCode",{parentName:"p"},"Keccak256")," of the bytes\nusing the private key by the author and added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," field of MembershipUpdateMessage."),(0,r.kt)("h3",{id:"group-membership-event"},"Group membership event"),(0,r.kt)("p",null,"Any ",(0,r.kt)("inlineCode",{parentName:"p"},"group membership")," event received MUST be verified by calculating the signature as per the method described above.\nThe author MUST be extracted from it, if the verification fails the event MUST be discarded."),(0,r.kt)("h4",{id:"chat_created"},"CHAT_CREATED"),(0,r.kt)("p",null,"Chat ",(0,r.kt)("inlineCode",{parentName:"p"},"created event")," is the first event that needs to be sent.\nAny event with a clock value lower than this MUST be discarded.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId"),"\nprovided with the updates and create a chat with identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId")," and named ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,r.kt)("h4",{id:"name_changed"},"NAME_CHANGED"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"admins")," use a ",(0,r.kt)("inlineCode",{parentName:"p"},"name changed")," event to change the name of the group chat.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId")," provided with the updates\nand MUST ensure the author of the event is an admin of the chat, otherwise the event MUST be ignored.\nIf the event is valid the chat name SHOULD be changed to ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,r.kt)("h4",{id:"members_added"},"MEMBERS_ADDED"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"admins")," use a ",(0,r.kt)("inlineCode",{parentName:"p"},"members added")," event to add members to the chat.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId"),"\nprovided with the updates and MUST ensure the author of the event is an admin of the chat, otherwise the event MUST be ignored.\nIf the event is valid a client MUST update the list of members of the chat who have not joined, adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"members")," received.\n",(0,r.kt)("inlineCode",{parentName:"p"},"members")," is an array of hex encoded public keys."),(0,r.kt)("h4",{id:"member_joined"},"MEMBER_JOINED"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"members")," use a ",(0,r.kt)("inlineCode",{parentName:"p"},"members joined")," event to signal that they want to start receiving messages from this chat.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId")," provided with the updates.\nIf the event is valid a client MUST update the list of members of the chat who joined, adding the signer.\nAny ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," sent to the group chat should now include the newly joined member."),(0,r.kt)("h4",{id:"admins_added"},"ADMINS_ADDED"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"admins")," use an ",(0,r.kt)("inlineCode",{parentName:"p"},"admins added")," event to add make other admins in the chat.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId")," provided with the updates,\nMUST ensure the author of the event is an admin of the chat\nand MUST ensure all ",(0,r.kt)("inlineCode",{parentName:"p"},"members")," are already ",(0,r.kt)("inlineCode",{parentName:"p"},"members")," of the chat, otherwise the event MUST be ignored.\nIf the event is valid a client MUST update the list of admins of the chat, adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"members")," received.\n",(0,r.kt)("inlineCode",{parentName:"p"},"members")," is an array of hex encoded public keys."),(0,r.kt)("h4",{id:"member_removed"},"MEMBER_REMOVED"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"members")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"admins")," use a ",(0,r.kt)("inlineCode",{parentName:"p"},"member-removed")," event to leave or kick members of the chat.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId")," provided with the updates, MUST ensure that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the author of the event is an admin, target can only be themselves or a non-admin member."),(0,r.kt)("li",{parentName:"ul"},"If the author of the event is not an admin, the target of the event can only be themselves.")),(0,r.kt)("p",null,"If the event is valid a client MUST remove the member from the list of ",(0,r.kt)("inlineCode",{parentName:"p"},"members"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"admins")," of the chat,\nand no further message should be sent to them."),(0,r.kt)("h4",{id:"admin_removed"},"ADMIN_REMOVED"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Admins")," use an ",(0,r.kt)("inlineCode",{parentName:"p"},"admin-removed")," event to drop admin privileges.\nUpon receiving this event a client MUST validate the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatId")," provided with the updates,\nMUST ensure that the author of the event is also the target of the event."),(0,r.kt)("p",null,"If the event is valid a client MUST remove the member from the list of ",(0,r.kt)("inlineCode",{parentName:"p"},"admins")," of the chat."),(0,r.kt)("h2",{id:"copyright"},"Copyright"),(0,r.kt)("p",null,"Copyright and related rights waived via ",(0,r.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/status/deprecated/payloads"},"PAYLOADS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc4122"},"UUID"))))}m.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),h=p(a),c=r,u=h["".concat(o,".").concat(c)]||h[c]||m[c]||i;return a?n.createElement(u,l(l({ref:t},s),{},{components:a})):n.createElement(u,l({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,l[1]=d;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);