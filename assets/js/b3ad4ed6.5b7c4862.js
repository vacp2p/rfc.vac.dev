"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[2166],{2566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=n(87462),r=(n(67294),n(3905));const a={title:"12/WAKU2-FILTER",name:"Waku v2 Filter",status:"draft",version:1,editor:"Hanno Cornelius &lt;hanno@status.im&gt;",contributors:["Dean Eigenmann &lt;dean@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;","Sanaz Taheri &lt;sanaz@status.im&gt;","Ebube Ud &lt;ebube@status.im&gt;"]},s=void 0,o={unversionedId:"standards/core/12/filter",id:"standards/core/12/filter",title:"12/WAKU2-FILTER",description:"- Status: draft",source:"@site/waku/standards/core/12/filter.md",sourceDirName:"standards/core/12",slug:"/standards/core/12/filter",permalink:"/waku/standards/core/12/filter",draft:!1,tags:[],version:"current",frontMatter:{title:"12/WAKU2-FILTER",name:"Waku v2 Filter",status:"draft",version:1,editor:"Hanno Cornelius &lt;hanno@status.im&gt;",contributors:["Dean Eigenmann &lt;dean@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;","Sanaz Taheri &lt;sanaz@status.im&gt;","Ebube Ud &lt;ebube@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"12/WAKU2-FILTER",permalink:"/waku/standards/core/12/previous-versions/00/filter"},next:{title:"13/WAKU2-STORE",permalink:"/waku/standards/core/13/previous-versions/00/store"}},l={},u=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Semantics",id:"semantics",level:2},{value:"Content filtering",id:"content-filtering",level:3},{value:"Terminology",id:"terminology",level:3},{value:"Protobuf",id:"protobuf",level:3},{value:"Filter-Subscribe",id:"filter-subscribe",level:3},{value:"Filter Subscribe Request",id:"filter-subscribe-request",level:4},{value:"Filter Subscribe Response",id:"filter-subscribe-response",level:4},{value:"Filter matching",id:"filter-matching",level:4},{value:"Filter Subscribe Types",id:"filter-subscribe-types",level:4},{value:"SUBSCRIBER_PING",id:"subscriber_ping",level:5},{value:"SUBSCRIBE",id:"subscribe",level:5},{value:"UNSUBSCRIBE",id:"unsubscribe",level:5},{value:"UNSUBSCRIBE_ALL",id:"unsubscribe_all",level:5},{value:"Filter-Push",id:"filter-push",level:3},{value:"Message Push",id:"message-push",level:4},{value:"Adversarial Model",id:"adversarial-model",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Future Work",id:"future-work",level:4},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2},{value:"Informative",id:"informative",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Status: draft"),(0,r.kt)("li",{parentName:"ul"},"Editor: Hanno Cornelius ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:hanno@status.im"},"hanno@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Contributors:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Dean Eigenmann ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:dean@status.im"},"dean@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:oskar@status.im"},"oskar@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Sanaz Taheri ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:sanaz@status.im"},"sanaz@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Ebube Ud ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:ebube@status.im"},"ebube@status.im"),">")))),(0,r.kt)("p",null,"previous versions: ",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/12/previous-versions/00/filter"},"00")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Protocol identifiers"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"filter-subscribe"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"/vac/waku/filter-subscribe/2.0.0-beta1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"filter-push"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"/vac/waku/filter-push/2.0.0-beta1"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"This specification describes the ",(0,r.kt)("inlineCode",{parentName:"p"},"12/WAKU2-FILTER")," protocol,\nwhich enables a client to subscribe to a subset of real-time messages from a Waku peer.\nThis is a more lightweight version of ",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/11/relay"},"11/WAKU2-RELAY"),",\nuseful for bandwidth restricted devices.\nThis is often used by nodes with lower resource limits to subscribe to full Relay nodes and\nonly receive the subset of messages they desire,\nbased on content topic interest."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Unlike the ",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/13/store"},"13/WAKU2-STORE")," protocol\nfor historical messages, this protocol allows for native lower latency scenarios,\nsuch as instant messaging.\nIt is thus complementary to it."),(0,r.kt)("p",null,"Strictly speaking, it is not just doing basic request-response, but\nperforms sender push based on receiver intent.\nWhile this can be seen as a form of light publish/subscribe,\nit is only used between two nodes in a direct fashion. Unlike the\nGossip domain, this is suitable for light nodes which put a premium on bandwidth.\nNo gossiping takes place."),(0,r.kt)("p",null,"It is worth noting that a light node could get by with only using the\n",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/13/store"},"13/WAKU2-STORE")," protocol to\nquery for a recent time window, provided it is acceptable to do frequent polling."),(0,r.kt)("h2",{id:"semantics"},"Semantics"),(0,r.kt)("p",null,"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d,\n\u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and\n\u201cOPTIONAL\u201d in this document are to be interpreted as described in\xa0",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/rfc/rfc2119.txt"},"2119"),"."),(0,r.kt)("h3",{id:"content-filtering"},"Content filtering"),(0,r.kt)("p",null,"Content filtering is a way to do\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern#Message_filtering"},"message-based filtering"),".\nCurrently the only content filter being applied is on ",(0,r.kt)("inlineCode",{parentName:"p"},"contentTopic"),"."),(0,r.kt)("h3",{id:"terminology"},"Terminology"),(0,r.kt)("p",null,"The term Personally identifiable information (PII)\nrefers to any piece of data that can be used to uniquely identify a user.\nFor example, the signature verification key, and\nthe hash of one's static IP address are unique for each user and hence count as PII."),(0,r.kt)("h3",{id:"protobuf"},"Protobuf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\n// Protocol identifier: /vac/waku/filter-subscribe/2.0.0-beta1\nmessage FilterSubscribeRequest {\n  enum FilterSubscribeType {\n    SUBSCRIBER_PING = 0;\n    SUBSCRIBE = 1;\n    UNSUBSCRIBE = 2;\n    UNSUBSCRIBE_ALL = 3;\n  }\n\n  string request_id = 1;\n  FilterSubscribeType filter_subscribe_type = 2;\n\n  // Filter criteria\n  optional string pubsub_topic = 10;\n  repeated string content_topics = 11;\n}\n\nmessage FilterSubscribeResponse {\n  string request_id = 1;\n  uint32 status_code = 10;\n  optional string status_desc = 11;\n}\n\n// Protocol identifier: /vac/waku/filter-push/2.0.0-beta1\nmessage MessagePush {\n  WakuMessage waku_message = 1;\n  optional string pubsub_topic = 2;\n}\n')),(0,r.kt)("h3",{id:"filter-subscribe"},"Filter-Subscribe"),(0,r.kt)("p",null,"A filter service node MUST support the ",(0,r.kt)("em",{parentName:"p"},"filter-subscribe"),' protocol\nto allow filter clients to subscribe, modify, refresh and\nunsubscribe a desired set of filter criteria.\nThe combination of different filter criteria\nfor a specific filter client node is termed a "subscription".\nA filter client is interested in receiving messages matching the filter criteria\nin its registered subscriptions.'),(0,r.kt)("p",null,"Since a filter service node is consuming resources to provide this service,\nit MAY account for usage and adapt its service provision to certain clients."),(0,r.kt)("h4",{id:"filter-subscribe-request"},"Filter Subscribe Request"),(0,r.kt)("p",null,"A client node MUST send all filter requests in a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," message.\nThis request MUST contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"request_id"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"request_id")," MUST be a uniquely generated string.\nEach request MUST include a ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type"),", indicating the type of request."),(0,r.kt)("h4",{id:"filter-subscribe-response"},"Filter Subscribe Response"),(0,r.kt)("p",null,"When responding to a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest"),",\na filter service node SHOULD send a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeResponse"),"\nwith a ",(0,r.kt)("inlineCode",{parentName:"p"},"requestId")," matching that of the request.\nThis response MUST contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," indicating if the request was successful\nor not.\nSuccessful status codes are in the ",(0,r.kt)("inlineCode",{parentName:"p"},"2xx")," range.\nClient nodes SHOULD consider all other status codes as error codes and\nassume that the requested operation had failed.\nIn addition,\nthe filter service node MAY choose to provide a more detailed status description\nin the ",(0,r.kt)("inlineCode",{parentName:"p"},"status_desc")," field."),(0,r.kt)("h4",{id:"filter-matching"},"Filter matching"),(0,r.kt)("p",null,'In the description of each request type below,\nthe term "filter criteria" refers to the combination of ',(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic")," and\na set of ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics"),".\nThe request MAY include filter criteria,\nconditional to the selected ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type"),".\nIf the request contains filter criteria,\nit MUST contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic"),"\nand the ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set MUST NOT be empty.\nA ",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/14/message"},"14/WAKU2-MESSAGE")," matches filter criteria\nwhen its ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topic")," is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set\nand it was published on a matching ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic"),"."),(0,r.kt)("h4",{id:"filter-subscribe-types"},"Filter Subscribe Types"),(0,r.kt)("p",null,"The filter-subscribe types are defined as follows:"),(0,r.kt)("h5",{id:"subscriber_ping"},"SUBSCRIBER_PING"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBSCRIBER_PING"),",\nrequests that the filter service node SHOULD indicate if it has any active subscriptions\nfor this client.\nThe filter client SHOULD exclude any filter criteria from the request.\nThe filter service node SHOULD respond with a success ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code"),"\nif it has any active subscriptions for this client\nor an error ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," if not.\nThe filter service node SHOULD ignore any filter criteria in the request."),(0,r.kt)("h5",{id:"subscribe"},"SUBSCRIBE"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBSCRIBE"),"\nrequests that the filter service node SHOULD push messages\nmatching this filter to the client.\nThe filter client MUST include the desired filter criteria in the request.\nA client MAY use this request type to ",(0,r.kt)("em",{parentName:"p"},"modify")," an existing subscription\nby providing ",(0,r.kt)("em",{parentName:"p"},"additional")," filter criteria in a new request.\nA client MAY use this request type to ",(0,r.kt)("em",{parentName:"p"},"refresh")," an existing subscription\nby providing ",(0,r.kt)("em",{parentName:"p"},"the same")," filter criteria in a new request.\nThe filter service node SHOULD respond with a success ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code"),"\nif it successfully honored this request\nor an error ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," if not.\nThe filter service node SHOULD respond with an error ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," and\ndiscard the request if the ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest"),"\ndoes not contain valid filter criteria,\ni.e. both a ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic")," ",(0,r.kt)("em",{parentName:"p"},"and")," a non-empty ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set."),(0,r.kt)("h5",{id:"unsubscribe"},"UNSUBSCRIBE"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"UNSUBSCRIBE"),"\nrequests that the service node SHOULD ",(0,r.kt)("em",{parentName:"p"},"stop")," pushing messages\nmatching this filter to the client.\nThe filter client MUST include the filter criteria\nit desires to unsubscribe from in the request.\nA client MAY use this request type to ",(0,r.kt)("em",{parentName:"p"},"modify")," an existing subscription\nby providing ",(0,r.kt)("em",{parentName:"p"},"a subset of")," the original filter criteria\nto unsubscribe from in a new request.\nThe filter service node SHOULD respond with a success ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code"),"\nif it successfully honored this request\nor an error ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," if not.\nThe filter service node SHOULD respond with an error ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," and\ndiscard the request if the unsubscribe request does not contain valid filter criteria,\ni.e. both a ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic")," ",(0,r.kt)("em",{parentName:"p"},"and")," a non-empty ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set."),(0,r.kt)("h5",{id:"unsubscribe_all"},"UNSUBSCRIBE_ALL"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"UNSUBSCRIBE_ALL"),"\nrequests that the service node SHOULD ",(0,r.kt)("em",{parentName:"p"},"stop")," pushing messages\nmatching ",(0,r.kt)("em",{parentName:"p"},"any")," filter to the client.\nThe filter client SHOULD exclude any filter criteria from the request.\nThe filter service node SHOULD remove any existing subscriptions for this client.\nIt SHOULD respond with a success ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," if it successfully honored this request\nor an error ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," if not."),(0,r.kt)("h3",{id:"filter-push"},"Filter-Push"),(0,r.kt)("p",null,"A filter client node MUST support the ",(0,r.kt)("em",{parentName:"p"},"filter-push")," protocol\nto allow filter service nodes to push messages\nmatching registered subscriptions to this client."),(0,r.kt)("p",null,"A filter service node SHOULD push all messages\nmatching the filter criteria in a registered subscription\nto the subscribed filter client.\nThese ",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/14/message"},(0,r.kt)("inlineCode",{parentName:"a"},"WakuMessage"),"s"),"\nare likely to come from ",(0,r.kt)("a",{parentName:"p",href:"/waku/standards/core/11/relay"},(0,r.kt)("inlineCode",{parentName:"a"},"11/WAKU2-RELAY")),",\nbut there MAY be other sources or protocols where this comes from.\nThis is up to the consumer of the protocol."),(0,r.kt)("p",null,"If a message push fails,\nthe filter service node MAY consider the client node to be unreachable.\nIf a specific filter client node is not reachable from the service node\nfor a period of time,\nthe filter service node MAY choose to stop pushing messages to the client and\nremove its subscription.\nThis period is up to the service node implementation.\nIt is RECOMMENDED to set ",(0,r.kt)("inlineCode",{parentName:"p"},"1 minute")," as a reasonable default."),(0,r.kt)("h4",{id:"message-push"},"Message Push"),(0,r.kt)("p",null,"Each message MUST be pushed in a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush")," message.\nEach ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush")," MUST contain one (and only one) ",(0,r.kt)("inlineCode",{parentName:"p"},"waku_message"),".\nIf this message was received on a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic"),",\nit SHOULD be included in the ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush"),".\nA filter client SHOULD NOT respond to a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush"),".\nSince the filter protocol does not include caching or fault-tolerance,\nthis is a best effort push service with no bundling\nor guaranteed retransmission of messages.\nA filter client SHOULD verify that each ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush")," it receives\noriginated from a service node where the client has an active subscription\nand that it matches filter criteria belonging to that subscription."),(0,r.kt)("h3",{id:"adversarial-model"},"Adversarial Model"),(0,r.kt)("p",null,"Any node running the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol\ni.e., both the subscriber node and\nthe queried node are considered as an adversary.\nFurthermore, we consider the adversary as a passive entity\nthat attempts to collect information from other nodes to conduct an attack but\nit does so without violating protocol definitions and instructions.\nFor example, under the passive adversarial model,\nno malicious node intentionally hides the messages\nmatching to one's subscribed content filter\nas it is against the description of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol."),(0,r.kt)("p",null,"The following are not considered as part of the adversarial model:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An adversary with a global view of all the nodes and their connections."),(0,r.kt)("li",{parentName:"ul"},"An adversary that can eavesdrop on communication links\nbetween arbitrary pairs of nodes (unless the adversary is one end of the communication).\nIn specific, the communication channels are assumed to be secure.")),(0,r.kt)("h3",{id:"security-considerations"},"Security Considerations"),(0,r.kt)("p",null,"Note that while using ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," allows light nodes to save bandwidth,\nit comes with a privacy cost in the sense that they need to\ndisclose their liking topics to the full nodes to retrieve the relevant messages.\nCurrently, anonymous subscription is not supported by the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter"),", however,\npotential solutions in this regard are discussed below."),(0,r.kt)("h4",{id:"future-work"},"Future Work"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Anonymous filter subscription"),":\nThis feature guarantees that nodes can anonymously subscribe for a message filter\n(i.e., without revealing their exact content filter).\nAs such, no adversary in the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol\nwould be able to link nodes to their subscribed content filers.\nThe current version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol does not provide anonymity\nas the subscribing node has a direct connection to the full node and\nexplicitly submits its content filter to be notified about the matching messages.\nHowever, one can consider preserving anonymity through one of the following ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By hiding the source of the subscription i.e., anonymous communication.\nThat is the subscribing node shall hide all its PII in its filter request\ne.g., its IP address.\nThis can happen by the utilization of a proxy server or by using Tor")),(0,r.kt)("p",null,".\nNote that the current structure of filter requests\ni.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterRPC")," does not embody any piece of PII, otherwise,\nsuch data fields must be treated carefully to achieve anonymity."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By deploying secure 2-party computations in which\nthe subscribing node obtains the messages matching a content filter\nwhereas the full node learns nothing about the content filter as well as\nthe messages pushed to the subscribing node.\nExamples of such 2PC protocols are\n",(0,r.kt)("a",{parentName:"li",href:"https://link.springer.com/referenceworkentry/10.1007%2F978-1-4419-5906-5_9#:~:text=Oblivious%20transfer%20(OT)%20is%20a,information%20the%20receiver%20actually%20obtains."},"Oblivious Transfers"),"\nand one-way Private Set Intersections (PSI).")),(0,r.kt)("h2",{id:"copyright"},"Copyright"),(0,r.kt)("p",null,"Copyright and related rights waived via\n",(0,r.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/waku/standards/core/11/relay"},"11/WAKU2-RELAY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern#Message_filtering"},"message-based filtering")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/waku/standards/core/13/store"},"13/WAKU2-STORE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/waku/standards/core/14/message"},"14/WAKU2-MESSAGE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://link.springer.com/referenceworkentry/10.1007%2F978-1-4419-5906-5_9#:~:text=Oblivious%20transfer%20(OT)%20is%20a,information%20the%20receiver%20actually%20obtains"},"Oblivious Transfers")),(0,r.kt)("li",{parentName:"ul"},"12/WAKU2-FILTER previous version: ",(0,r.kt)("a",{parentName:"li",href:"waku/standards/core/12/previous-versions/00/filter"},"00"))),(0,r.kt)("h3",{id:"informative"},"Informative"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern#Message_filtering"},"Message Filtering (Wikipedia)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/libp2p/specs/tree/master/pubsub#topic-validation"},"Libp2p PubSub spec - topic validation"))))}p.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return n?i.createElement(m,s(s({ref:t},c),{},{components:n})):i.createElement(m,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);