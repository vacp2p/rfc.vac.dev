"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[1499],{47829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"8/WAKU-MAIL",name:"Waku Mailserver",status:"stable",editor:"Andrea Maria Piana &lt;andreap@status.im&gt;",contributors:["Adam Babik &lt;adam@status.im&gt;","Dean Eigenmann &lt;dean@status.im&gt;","Oskar Thor\xe9n &lt;oskarth@titanproxy.com&gt;"]},o=void 0,s={unversionedId:"standards/legacy/8/mail",id:"standards/legacy/8/mail",title:"8/WAKU-MAIL",description:"- Status: stable",source:"@site/waku/standards/legacy/8/mail.md",sourceDirName:"standards/legacy/8",slug:"/standards/legacy/8/mail",permalink:"/waku/standards/legacy/8/mail",draft:!1,tags:[],version:"current",frontMatter:{title:"8/WAKU-MAIL",name:"Waku Mailserver",status:"stable",editor:"Andrea Maria Piana &lt;andreap@status.im&gt;",contributors:["Adam Babik &lt;adam@status.im&gt;","Dean Eigenmann &lt;dean@status.im&gt;","Oskar Thor\xe9n &lt;oskarth@titanproxy.com&gt;"]},sidebar:"defaultSidebar",previous:{title:"7/WAKU-DATA",permalink:"/waku/standards/legacy/7/data"},next:{title:"9/WAKU-RPC",permalink:"/waku/standards/legacy/9/rpc"}},l={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Specification",id:"specification",level:2},{value:"Requesting Historic Envelopes",id:"requesting-historic-envelopes",level:3},{value:"Receiving Historic Envelopes",id:"receiving-historic-envelopes",level:3},{value:"Security considerations",id:"security-considerations",level:3},{value:"Changelog",id:"changelog",level:2},{value:"Difference between wms 0.1 and wms 0.2",id:"difference-between-wms-01-and-wms-02",level:3},{value:"Copyright",id:"copyright",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Status: stable"),(0,r.kt)("li",{parentName:"ul"},"Editor: Andrea Maria Piana ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Contributors:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Adam Babik ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:adam@status.im"},"adam@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Dean Eigenmann ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:dean@status.im"},"dean@status.im"),">"),(0,r.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n ","<",(0,r.kt)("a",{parentName:"li",href:"mailto:oskarth@titanproxy.com"},"oskarth@titanproxy.com"),">")))),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"In this specification, we describe Mailservers.\nThese are nodes responsible for archiving envelopes and\ndelivering them to peers on-demand."),(0,r.kt)("h2",{id:"specification"},"Specification"),(0,r.kt)("p",null,"A node which wants to provide mailserver functionality MUST store envelopes\nfrom incoming Messages packets (Waku packet-code ",(0,r.kt)("inlineCode",{parentName:"p"},"0x01"),").\nThe envelopes can be stored in any format,\nhowever they MUST be serialized and deserialized to the Waku envelope format."),(0,r.kt)("p",null,"A mailserver SHOULD store envelopes for all topics\nto be generally useful for any peer,\nhowever for specific use cases it MAY store envelopes for a subset of topics."),(0,r.kt)("h3",{id:"requesting-historic-envelopes"},"Requesting Historic Envelopes"),(0,r.kt)("p",null,"In order to request historic envelopes,\na node MUST send a packet P2P Request (",(0,r.kt)("inlineCode",{parentName:"p"},"0x7e"),")\nto a peer providing mailserver functionality.\nThis packet requires one argument which MUST be a Waku envelope."),(0,r.kt)("p",null,"In the Waku envelope's payload section,\nthere MUST be RLP-encoded information about the details of the request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abnf"},'; UNIX time in seconds; oldest requested envelope\'s creation time\nlower  = 4OCTET\n\n; UNIX time in seconds; newest requested envelope\'s creation time\nupper  = 4OCTET\n\n; array of Waku topics encoded in a bloom filter to filter envelopes\nbloom  = 64OCTET\n\n; unsigned integer limiting the number of returned envelopes\nlimit  = 4OCTET\n\n; array of a cursor returned from the previous request (optional)\ncursor = *OCTET\n\n; List of topics interested in\ntopics = "[" *1000topic "]"\n\n; 4 bytes of arbitrary data\ntopic = 4OCTET\n\npayload-without-topic = "[" lower upper bloom limit [ cursor ] "]"\n\npayload-with-topic = "[" lower upper bloom limit cursor [ topics ] "]"\n\npayload = payload-with-topic | payload-without-topic\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," field SHOULD be filled in if a number of envelopes between ",(0,r.kt)("inlineCode",{parentName:"p"},"Lower")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Upper")," is greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"Limit")," so that the requester can send another request\nusing the obtained ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," value.\nWhat exactly is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," is up to the implementation.\nThe requester SHOULD NOT use a ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," obtained from one mailserver in a request\nto another mailserver because the format or the result MAY be different."),(0,r.kt)("p",null,"The envelope MUST be encrypted with a symmetric key agreed between the requester\nand Mailserver."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"Topics")," is used the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," field MUST be specified\nfor the argument order to be unambiguous.\nHowever, it MAY be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"Topics")," is used to specify which topics a node is interested in.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"Topics")," is not empty,\na mailserver MUST only send envelopes that belong to a topic from ",(0,r.kt)("inlineCode",{parentName:"p"},"Topics")," list and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Bloom")," value MUST be ignored."),(0,r.kt)("h3",{id:"receiving-historic-envelopes"},"Receiving Historic Envelopes"),(0,r.kt)("p",null,"Historic envelopes MUST be sent to a peer as a packet with a P2P Message code (",(0,r.kt)("inlineCode",{parentName:"p"},"0x7f"),")\nfollowed by an array of Waku envelopes.\nA Mailserver MUST limit the amount of messages sent,\neither by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Limit")," specified in the request or\nlimited to the maximum ",(0,r.kt)("a",{parentName:"p",href:"./waku#maximum-packet-size"},"RLPx packet size"),",\nwhichever limit comes first."),(0,r.kt)("p",null,"In order to receive historic envelopes from a mailserver,\na node MUST trust the selected mailserver,\nthat is allow to receive expired packets with the P2P Message code.\nBy default, such packets are discarded."),(0,r.kt)("p",null,"Received envelopes MUST be passed through the Whisper envelope pipelines\nso that they are picked up by registered filters and passed to subscribers."),(0,r.kt)("p",null,"For a requester, to know that all envelopes have been sent by mailserver,\nit SHOULD handle P2P Request Complete code (",(0,r.kt)("inlineCode",{parentName:"p"},"0x7d"),").\nThis code is followed by a list with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abnf"},'; array with a Keccak-256 hash of the envelope containing the original request.\nrequest-id = 32OCTET\n\n; array with a Keccak-256 hash of the last sent envelope for the request. \nlast-envelope-hash = 32OCTET\n\n; array of a cursor returned from the previous request (optional)\ncursor = *OCTET\n\npayload = "[" request-id last-envelope-hash [ cursor ] "]"\n')),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," is not empty,\nit means that not all envelopes were sent due to the set ",(0,r.kt)("inlineCode",{parentName:"p"},"Limit")," in the request.\nOne or more consecutive requests MAY be sent with ",(0,r.kt)("inlineCode",{parentName:"p"},"Cursor")," field filled\nin order to receive the rest of the envelopes."),(0,r.kt)("h3",{id:"security-considerations"},"Security considerations"),(0,r.kt)("p",null,"There are several security considerations to take into account when running or\ninteracting with Mailservers.\nChief among them are: scalability, DDoS-resistance and privacy."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mailserver High Availability requirement:")),(0,r.kt)("p",null,"A mailserver has to be online to receive envelopes for other nodes,\nthis puts a high availability requirement on it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mailserver client privacy:")),(0,r.kt)("p",null,"A mailserver client fetches archival envelopes from a mailserver\nthrough a direct connection.\nIn this direct connection,\nthe client discloses its IP/ID as well as the topics/ bloom filter\nit is interested in to the mailserver.\nThe collection of such information allows the mailserver to link clients' IP/IDs\nto their topic interests and build a profile for each client over time.\nAs such, the mailserver client has to trust the mailserver with this level of information.\nA similar concern exists for the light nodes and\ntheir direct peers which is discussed in the security considerations of ",(0,r.kt)("a",{parentName:"p",href:"../6/waku1"},"6/WAKU1"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mailserver trusted connection:")),(0,r.kt)("p",null,"A mailserver has a direct TCP connection, which means they are trusted to send traffic.\nThis means a malicious or malfunctioning mailserver can overwhelm an individual node."),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/vacp2p/specs/commit/bc7e75ebb2e45d2cbf6ab27352c113e666df37c8"},"1.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"marked stable as it is in use.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"0.2.0"),(0,r.kt)("td",{parentName:"tr",align:null},"Add topic interest to reduce bandwidth usage")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/vacp2p/specs/blob/06d4c736c920526472a507e5d842212843a112ed/wms"},"0.1.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Initial Release")))),(0,r.kt)("h3",{id:"difference-between-wms-01-and-wms-02"},"Difference between wms 0.1 and wms 0.2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topics")," option")),(0,r.kt)("h2",{id:"copyright"},"Copyright"),(0,r.kt)("p",null,"Copyright and related rights waived via ",(0,r.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);