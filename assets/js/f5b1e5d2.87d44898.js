"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[6252],{20478:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={title:"71/STATUS-PUSH-NOTIFICATION-SERVER",name:"Push Notification Server",status:"draft",category:"Standards Track",description:"A set of methods to allow Status clients to use push notification services in mobile environments.",editor:"Jimmy Debe &lt;jimmy@status.im&gt;",contributors:["Andrea Maria Piana &lt;andreap@status.im&gt;"]},o=void 0,s={unversionedId:"71/push-notification-server",id:"71/push-notification-server",title:"71/STATUS-PUSH-NOTIFICATION-SERVER",description:"A set of methods to allow Status clients to use push notification services in mobile environments.",source:"@site/status/71/push-notification-server.md",sourceDirName:"71",slug:"/71/push-notification-server",permalink:"/status/71/push-notification-server",draft:!1,tags:[],version:"current",frontMatter:{title:"71/STATUS-PUSH-NOTIFICATION-SERVER",name:"Push Notification Server",status:"draft",category:"Standards Track",description:"A set of methods to allow Status clients to use push notification services in mobile environments.",editor:"Jimmy Debe &lt;jimmy@status.im&gt;",contributors:["Andrea Maria Piana &lt;andreap@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"65/STATUS-ACCOUNT-ADDRESS",permalink:"/status/65/account-address"}},l={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Background",id:"background",level:2},{value:"Specification",id:"specification",level:2},{value:"Definitions",id:"definitions",level:3},{value:"Server Components",id:"server-components",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Push Notification Server Flow",id:"push-notification-server-flow",level:3},{value:"Registration Process",id:"registration-process",level:4},{value:"Sending and Receiving Notification Process",id:"sending-and-receiving-notification-process",level:4},{value:"Registering Client",id:"registering-client",level:3},{value:"Handle Errors",id:"handle-errors",level:4},{value:"Push Notification Server",id:"push-notification-server",level:2},{value:"Query Topic",id:"query-topic",level:3},{value:"Server Grant",id:"server-grant",level:4},{value:"Unregistering with a Server",id:"unregistering-with-a-server",level:4},{value:"Re-registering with a Server",id:"re-registering-with-a-server",level:4},{value:"Advertising a Server",id:"advertising-a-server",level:4},{value:"Handle Advertisement Message",id:"handle-advertisement-message",level:4},{value:"Discovering a Server",id:"discovering-a-server",level:4},{value:"Querying a Server",id:"querying-a-server",level:4},{value:"Handle Query Message",id:"handle-query-message",level:4},{value:"Handle Query Response",id:"handle-query-response",level:4},{value:"Sending Client",id:"sending-client",level:3},{value:"Handle Notification Request",id:"handle-notification-request",level:4},{value:"Handle Notification Response",id:"handle-notification-response",level:4},{value:"Protobuf Description",id:"protobuf-description",level:3},{value:"PushNotificationRegistration",id:"pushnotificationregistration",level:4},{value:"PushNotificationRegistrationResponse",id:"pushnotificationregistrationresponse",level:4},{value:"ContactCodeAdvertisement",id:"contactcodeadvertisement",level:4},{value:"PushNotificationQuery",id:"pushnotificationquery",level:4},{value:"PushNotificationQueryInfo",id:"pushnotificationqueryinfo",level:4},{value:"PushNotificationQueryResponse",id:"pushnotificationqueryresponse",level:4},{value:"PushNotification",id:"pushnotification",level:4},{value:"PushNotificationRequest",id:"pushnotificationrequest",level:4},{value:"PushNotificationResponse",id:"pushnotificationresponse",level:4},{value:"PushNotificationReport",id:"pushnotificationreport",level:4},{value:"Anonymous Mode",id:"anonymous-mode",level:3},{value:"Security/Privacy Considerations",id:"securityprivacy-considerations",level:2},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],d={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Status: draft"),(0,a.kt)("li",{parentName:"ul"},"Category: Standards Track"),(0,a.kt)("li",{parentName:"ul"},"Editor: Jimmy Debe ","<",(0,a.kt)("a",{parentName:"li",href:"mailto:jimmy@status.im"},"jimmy@status.im"),">"),(0,a.kt)("li",{parentName:"ul"},"Contributors:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Andrea Maria Piana ","<",(0,a.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">")))),(0,a.kt)("h2",{id:"abstract"},"Abstract"),(0,a.kt)("p",null,"A push notification server implementation for IOS devices and Android devices.\nThis specification provides a set of methods that allow clients\nto use push notification services in mobile environments."),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"Push notification for iOS and\nAndroid devices can only be implemented by relying on\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1"},"APN"),",\nApple Push Notification, service for iOS or\n",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/"},"Firebase")," for Android."),(0,a.kt)("p",null,"For some Android devices, foreground services are restricted,\nrequiring a user to grant authorization to applications\nto use foreground notifications.\nApple iOS devices restrict notifications to\na few internal functions that every application can not use.\nApplications on iOS can request execution time when they are in the background.\nThis has a limited set of use cases for example,\nit will not schedule any time if the application was closed with force quit.\nRequesting execution time is not responsive enough to\nimplement a push notification system.\nStatus provides a set of methods to acheive push notification services."),(0,a.kt)("p",null,"Since this can not be safely implemented in a privacy-preserving manner,\nclients need to be given an option to opt-in to receive and send push notifications.\nThey are disabled by default."),(0,a.kt)("h2",{id:"specification"},"Specification"),(0,a.kt)("p",null,"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d,\n\u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and\n\u201cOPTIONAL\u201d in this document are to be interpreted as described in\xa0",(0,a.kt)("a",{parentName:"p",href:"https://www.ietf.org/rfc/rfc2119.txt"},"2119"),"."),(0,a.kt)("h3",{id:"definitions"},"Definitions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Terminology"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"client"),(0,a.kt)("td",{parentName:"tr",align:null},"A node that implements the Status specifications.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"user"),(0,a.kt)("td",{parentName:"tr",align:null},"The owner of a device that runs a client.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"server"),(0,a.kt)("td",{parentName:"tr",align:null},"A service that performs push notifications.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Waku-Store"),(0,a.kt)("td",{parentName:"tr",align:null},"A Waku node that decides to provide functionality to store messages permanently and deliver the messages to requesting clients. As described in ",(0,a.kt)("a",{parentName:"td",href:"../../waku/standards/core/13/store"},"13/WAKU-STORE")," specification.")))),(0,a.kt)("h3",{id:"server-components"},"Server Components"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Components"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"gorush Instance"),(0,a.kt)("td",{parentName:"tr",align:null},"Only used by push notification servers and MUST be publicly available.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Push Notification Server"),(0,a.kt)("td",{parentName:"tr",align:null},"Used by clients to register for receiving and sending notifications.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Registering Client"),(0,a.kt)("td",{parentName:"tr",align:null},"A client that wants to receive push notifications.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Sending Client"),(0,a.kt)("td",{parentName:"tr",align:null},"A client that wants to send push notifications.")))),(0,a.kt)("h3",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"The party releasing the app MUST possess a certificate\nfor the Apple Push Notification service and\nit MUST run a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/appleboy/gorush"},"gorush"),"\npublicly accessible server for sending the actual notification.\nThe party releasing the app MUST run its own ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/appleboy/gorush"},"gorush"),"."),(0,a.kt)("h3",{id:"push-notification-server-flow"},"Push Notification Server Flow"),(0,a.kt)("h4",{id:"registration-process"},"Registration Process"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"registration",src:n(64596).Z,width:"407",height:"331"})),(0,a.kt)("h4",{id:"sending-and-receiving-notification-process"},"Sending and Receiving Notification Process"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"notification",src:n(93262).Z,width:"518",height:"607"})),(0,a.kt)("h3",{id:"registering-client"},"Registering Client"),(0,a.kt)("p",null,"Registering a client with a push notification service."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A client MAY register with one or\nmore push notification services in order to increase availability.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A client SHOULD make sure that all the notification services they registered with\nhave the same information about their tokens.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PNR message"),"\xa0(Push Notification Registration) MUST be sent to the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/54/x3dh-sessions"},"partitioned topic"),"\nfor the public key of the node, encrypted with this key.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PUSH_NOTIFICATION_REGISTRATION"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The marshaled protobuf payload MUST also be encrypted with AES-GCM\nusing the Diffie\u2013Hellman key generated from the client and server identity.\nThis is done in order to ensure that the extracted key from the signature\nwill be considered invalid if it can\u2019t decrypt the payload."))),(0,a.kt)("p",null,"The content of the message MUST contain the following\xa0",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protobuf record"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationRegistration {\n  enum TokenType {\n    UNKNOWN_TOKEN_TYPE = 0;\n    APN_TOKEN = 1;\n    FIREBASE_TOKEN = 2;\n  }\n  TokenType token_type = 1;\n  string device_token = 2;\n  string installation_id = 3;\n  string access_token = 4;\n  bool enabled = 5;\n  uint64 version = 6;\n  repeated bytes allowed_key_list = 7;\n  repeated bytes blocked_chat_list = 8;\n  bool unregister = 9;\n  bytes grant = 10;\n  bool allow_from_contacts_only = 11;\n  string apn_topic = 12;\n  bool block_mentions = 13;\n  repeated bytes allowed_mentions_chat_list = 14;\n}\n")),(0,a.kt)("p",null,"A push notification server will handle the message according to the following rules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST extract the public key of the sender from the signature and\nverify that the payload can be decrypted successfully.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"token_type"),"\xa0is supported.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"device_token"),"\xa0is non empty.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),"\xa0is non empty.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"version"),"\xa0is non-zero and\ngreater than the currently stored version for the public key and\n",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id")," of the sender, if any.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"grant"),"\xa0is non empty and according to the Grant Server\xa0specs.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\xa0is a valid\xa0uuid.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"it MUST verify that\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"apn_topic"),"\xa0is set if\xa0token_type\xa0is\xa0APN_TOKEN.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PUSH_NOTIFICATION_REGISTRATION_RESPONSE"),"."))),(0,a.kt)("p",null,"The payload of the response is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationRegistrationResponse {\n  bool success = 1;\n  ErrorType error = 2;\n  bytes request_id = 3;\n\n  enum ErrorType {\n    UNKNOWN_ERROR_TYPE = 0;\n    MALFORMED_MESSAGE = 1;\n    VERSION_MISMATCH = 2;\n    UNSUPPORTED_TOKEN_TYPE = 3;\n    INTERNAL_ERROR = 4;\n  }\n}\n\n")),(0,a.kt)("p",null,"A client SHOULD listen for a response sent on the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/54/x3dh-sessions"},"partitioned topic"),"\nthat the key used to register.\nIf\xa0success\xa0is\xa0true\xa0the client has registered successfully."),(0,a.kt)("p",null,"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"\xa0is\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"false"),":\n",">"," If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"MALFORMED_MESSAGE"),"\xa0is returned,\nthe request SHOULD NOT be retried without ensuring that it is correctly formed.\n",">"," If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"INTERNAL_ERROR"),"\xa0is returned, the request MAY be retried,\nbut the client MUST backoff exponentially."),(0,a.kt)("h4",{id:"handle-errors"},"Handle Errors"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the message can\u2019t be decrypted, the message MUST be discarded.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"token_type"),"\xa0is not supported, a response MUST be sent with\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"\xa0set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"UNSUPPORTED_TOKEN_TYPE"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"token"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"device_tokens"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"version"),"\xa0are empty,\na response MUST be sent with\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"\xa0set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"MALFORMED_MESSAGE"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"version"),"\xa0is equal or less than the currently stored ",(0,a.kt)("inlineCode",{parentName:"p"},"version"),",\na response MUST be sent with\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"\xa0set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"VERSION_MISMATCH"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If any other error occurs the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"\xa0SHOULD be set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"INTERNAL_ERROR"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the response is successful\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"\xa0MUST be set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\xa0otherwise\na response MUST be sent with\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"\xa0set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"request_id"),"\xa0SHOULD be set to the\n",(0,a.kt)("a",{parentName:"p",href:"https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.202.pdf"},(0,a.kt)("inlineCode",{parentName:"a"},"SHAKE-256")),"\nof the encrypted payload.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The response MUST be sent on the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/54/x3dh-sessions"},"partitioned topic"),"\nof the sender and MUST not be encrypted using\nthe\xa0secure transport\xa0to facilitate the usage of ephemeral keys.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If no response is returned, the request SHOULD be considered failed and\nMAY be retried with the same server or a different one, but clients\nMUST exponentially backoff after each trial."))),(0,a.kt)("h2",{id:"push-notification-server"},"Push Notification Server"),(0,a.kt)("p",null,"A node that handles receiving and sending push notifications for clients."),(0,a.kt)("h3",{id:"query-topic"},"Query Topic"),(0,a.kt)("p",null,"On successful registration the server MUST be listening to the topic derived from:\n",">"," ",(0,a.kt)("inlineCode",{parentName:"p"},"0x")," + HexEncode(Shake256(CompressedClientPublicKey))"),(0,a.kt)("p",null,"Using the topic derivation algorithm described\xa0here\xa0and listen for client queries."),(0,a.kt)("h4",{id:"server-grant"},"Server Grant"),(0,a.kt)("p",null,"A client MUST authorize a push notification server to send them push notifications.\nThis is done by building a grant which is specific to a given client-server pair.\nWhen receiving a grant,\nthe server MUST validate that the signature matches the registering client."),(0,a.kt)("p",null,"The grant is built as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"`Signature(Keccak256(CompressedPublicKeyOfClient.CompressedPublicKeyOfServer.AccessToken), PrivateKeyOfClient)`\n")),(0,a.kt)("h4",{id:"unregistering-with-a-server"},"Unregistering with a Server"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To unregister a client MUST send a\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"PushNotificationRegistration"),"\nrequest as described above with\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"unregister"),"\xa0set to\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"true"),",\nor removing their device information."),(0,a.kt)("li",{parentName:"ul"},"The server MUST remove all data about this user if\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"unregistering"),"\xa0is\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"true"),",\napart from the\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"hash"),"\xa0of the public key and\nthe\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"version"),"\xa0of the last options,\nin order to make sure that old messages are not processed."),(0,a.kt)("li",{parentName:"ul"},"A client MAY unregister from a server on explicit logout\nif multiple chat keys are used on a single device.")),(0,a.kt)("h4",{id:"re-registering-with-a-server"},"Re-registering with a Server"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A client SHOULD re-register with the node if the APN or FIREBASE token changes."),(0,a.kt)("li",{parentName:"ul"},"When re-registering a client SHOULD ensure\nthat it has the most up-to-date\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"PushNotificationRegistration"),"\xa0and\nincrement\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"version"),"\xa0if necessary."),(0,a.kt)("li",{parentName:"ul"},"Once re-registered, a client SHOULD advertise the changes.\nChanging options is handled the same as re-registering.")),(0,a.kt)("h4",{id:"advertising-a-server"},"Advertising a Server"),(0,a.kt)("p",null,"Each user registered with one or more push notification servers\nSHOULD advertise periodically the push notification services\nthey have registered with for each device they own."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationQueryInfo {\n  string access_token = 1;\n  string installation_id = 2;\n  bytes public_key = 3;\n  repeated bytes allowed_user_list = 4;\n  bytes grant = 5;\n  uint64 version = 6;\n  bytes server_public_key = 7;\n}\n\nmessage ContactCodeAdvertisement {\n  repeated PushNotificationQueryInfo push_notification_info = 1;\n}\n\n")),(0,a.kt)("h4",{id:"handle-advertisement-message"},"Handle Advertisement Message"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"li",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"PUSH_NOTIFICATION_QUERY_INFO"),"."),(0,a.kt)("li",{parentName:"ul"},"If no filtering is done based on public keys,\nthe access token SHOULD be included in the advertisement.\nOtherwise it SHOULD be left empty."),(0,a.kt)("li",{parentName:"ul"},"This SHOULD be advertised on the\n",(0,a.kt)("a",{parentName:"li",href:"../../waku/standards/application/53/x3dh"},"contact code topic"),"\xa0and\nSHOULD be coupled with normal contact-code advertisement."),(0,a.kt)("li",{parentName:"ul"},"When a user register or re-register with a push notification service,\ntheir contact-code SHOULD be re-advertised."),(0,a.kt)("li",{parentName:"ul"},"Multiple servers MAY be advertised for the same\xa0installation_id\n\xa0for redundancy reasons.")),(0,a.kt)("h4",{id:"discovering-a-server"},"Discovering a Server"),(0,a.kt)("p",null,"To discover a push notification service for a given user, their\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/53/x3dh"},"contact code topic"),"\nSHOULD be listened to.\nA Waku-Store node can be queried for the specific topic\nto retrieve the most up-to-date contact code."),(0,a.kt)("h4",{id:"querying-a-server"},"Querying a Server"),(0,a.kt)("p",null,"If a token is not present in the latest advertisement for a user,\nthe server SHOULD be queried directly."),(0,a.kt)("p",null,"To query a server a message:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationQuery {\n  repeated bytes public_keys = 1;\n}\n\n")),(0,a.kt)("h4",{id:"handle-query-message"},"Handle Query Message"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"li",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"PUSH_NOTIFICATION_QUERY"),"."),(0,a.kt)("li",{parentName:"ul"},"it MUST be sent to the server on the topic derived from the hashed public key\nof the key we are querying,\n",(0,a.kt)("a",{parentName:"li",href:"#query-topic"},"as\xa0described above"),"."),(0,a.kt)("li",{parentName:"ul"},"An ephemeral key SHOULD be used and SHOULD NOT be encrypted using the\xa0",(0,a.kt)("a",{parentName:"li",href:"../../waku/standards/application/53/x3dh"},"secure transport"),".")),(0,a.kt)("p",null,"If the server has information about the client a response MUST be sent:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationQueryInfo {\n  string access_token = 1;\n  string installation_id = 2;\n  bytes public_key = 3;\n  repeated bytes allowed_user_list = 4;\n  bytes grant = 5;\n  uint64 version = 6;\n  bytes server_public_key = 7;\n}\n\nmessage PushNotificationQueryResponse {\n  repeated PushNotificationQueryInfo info = 1;\n  bytes message_id = 2;\n  bool success = 3;\n}\n\n")),(0,a.kt)("h4",{id:"handle-query-response"},"Handle Query Response"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationQueryResponse"),"\xa0message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PUSH_NOTIFICATION_QUERY_RESPONSE"),".\nOtherwise a response MUST NOT be sent.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),"\xa0is not set\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\xa0MUST be set\nand\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),"\xa0MUST NOT be set.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),"\xa0is set\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),"\xa0MUST be set and\n",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\xa0MUST NOT be set.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\xa0is returned,\nthe\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\xa0SHOULD be used to send push notifications.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),"\xa0are returned,\nthe client SHOULD decrypt each token by generating an\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"AES-GCM"),"\xa0symmetric key\nfrom the Diffie\u2013Hellman between the target client and itself.\nIf AES decryption succeeds,\nit will return a valid\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"uuid"),"\xa0which is what is used for access_token.\nThe token SHOULD be used to send push notifications.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The response MUST be sent on the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/54/x3dh-sessions"},"partitioned topic"),"\nof the sender and\nMUST NOT be encrypted using the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/53/x3dh"},"secure transport"),"\nto facilitate the usage of ephemeral keys.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"On receiving a response,\na client MUST verify\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"grant"),"\xa0to ensure that the server\nhas been authorized to send push notification to a given client."))),(0,a.kt)("h3",{id:"sending-client"},"Sending Client"),(0,a.kt)("p",null,"Sending a push notification"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When sending a push notification,\nonly the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),"\xa0for the devices targeted by the message SHOULD be used.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If a message is for all the user devices,\nall the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),"\xa0known to the client MAY be used.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The number of devices MAY be capped in order to reduce resource consumption.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"At least 3 devices SHOULD be targeted, ordered by last activity.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For any device that a token is available, or that\na token is successfully queried,\na push notification message SHOULD be sent to the corresponding\npush notification server."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotification {\n  string access_token = 1;\n  string chat_id = 2;\n  bytes public_key = 3;\n  string installation_id = 4;\n  bytes message = 5;\n  PushNotificationType type = 6;\n  enum PushNotificationType {\n    UNKNOWN_PUSH_NOTIFICATION_TYPE = 0;\n    MESSAGE = 1;\n    MENTION = 2;\n  }\n  bytes author = 7;\n}\n\nmessage PushNotificationRequest {\n  repeated PushNotification requests = 1;\n  bytes message_id = 2;\n}\n\n")),(0,a.kt)("h4",{id:"handle-notification-request"},"Handle Notification Request"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationRequest"),"\xa0message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PUSH_NOTIFICATION_REQUEST"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Where\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"message"),"\xa0is the encrypted payload of the message and\n",(0,a.kt)("inlineCode",{parentName:"p"},"chat_id"),"\xa0is the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"chat_id"),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),"\xa0is the id of the message,\n",(0,a.kt)("inlineCode",{parentName:"p"},"author"),"\xa0is the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the public key of the sender.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If multiple server are available for a given push notification,\nonly one notification MUST be sent.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If no response is received a client SHOULD wait at least 3 seconds,\nafter which the request MAY be retried against a different server.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"This message SHOULD be sent using an ephemeral key."))),(0,a.kt)("p",null,"On receiving the message, the push notification server MUST validate the access token.\nIf the access token is valid, a notification MUST be sent to the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/appleboy/gorush"},"gorush")," instance with the following data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "message": "You have a new message",\n      "data": {\n        "chat_id": chat_id,\n        "message": message,\n        "installation_ids": [installation_id_1, installation_id_2]\n      }\n    }\n  ]\n}\n\n')),(0,a.kt)("p",null,"Where platform is\xa01\xa0for iOS and\xa02\xa0for Firebase, according to the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://github.com/appleboy/gorush"},"gorush documentation"),"."),(0,a.kt)("p",null,"A server MUST return a response message:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationReport {\n  bool success = 1;\n  ErrorType error = 2;\n  enum ErrorType {\n    UNKNOWN_ERROR_TYPE = 0;\n    WRONG_TOKEN = 1;\n    INTERNAL_ERROR = 2;\n    NOT_REGISTERED = 3;\n  }\n  bytes public_key = 3;\n  string installation_id = 4;\n}\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message PushNotificationResponse {\n  bytes message_id = 1;\n  repeated PushNotificationReport reports = 2;\n}\n\n")),(0,a.kt)("p",null,"Where\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),"\xa0is the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),"\xa0sent by the client."),(0,a.kt)("h4",{id:"handle-notification-response"},"Handle Notification Response"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationResponse"),"\xa0message MUST be wrapped in a\n",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},(0,a.kt)("inlineCode",{parentName:"a"},"ApplicationMetadataMessage")),"\xa0with type set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PUSH_NOTIFICATION_RESPONSE"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The response MUST be sent on the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/54/x3dh-sessions"},"partitioned topic"),"\nof the sender and\nMUST not be encrypted using the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/53/x3dh"},"secure transport"),"\nto facilitate the usage of ephemeral keys.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the request is accepted\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"\xa0MUST be set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nOtherwise\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"\xa0MUST be set to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"\xa0is\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"BAD_TOKEN"),"\xa0the client MAY query again the server for the token and\nretry the request.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"\xa0is\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"INTERNAL_ERROR"),"\xa0the client MAY retry the request."))),(0,a.kt)("h3",{id:"protobuf-description"},"Protobuf Description"),(0,a.kt)("h4",{id:"pushnotificationregistration"},"PushNotificationRegistration"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"token_type"),": the type of token. Currently supported is\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"APN_TOKEN"),"\xa0for Apple Push."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"device_token"),": the actual push notification token sent by\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"Firebase"),"\xa0or\n",(0,a.kt)("inlineCode",{parentName:"p"},"APN"),"\xa0and\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"FIREBASE_TOKEN"),"\xa0for firebase."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),"\xa0of the device."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),": the access token that will be given to clients to send push notifications."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"enabled"),": whether the device wants to be sent push notifications."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"version"),": a monotonically increasing number identifying the current\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationRegistration"),".\nAny time anything is changed in the record it MUST be increased by the client,\notherwise the request will not be accepted."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),": a list of\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\xa0encrypted with the AES key\ngenerated by Diffie\u2013Hellman between the publisher and the allowed contact."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"blocked_chat_list"),": a list of\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHA2-256"),"\xa0hashes of chat ids.\nAny chat id in this list will not trigger a notification."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"unregister"),": whether the account should be unregistered."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"grant"),": the grant for this specific server."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"allow_from_contacts_only"),": whether the client only wants\npush notifications from contacts."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"apn_topic"),": the APN topic for the push notification."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"block_mentions"),": whether the client does not want to be notified on mentions."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"allowed_mentions_chat_list"),": a list of\xa0SHA2-256\xa0hashes of chat ids\nwhere we want to receive mentions."),(0,a.kt)("p",null,"DATA DISCLOSED"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Type of device owned by a given user.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"FIREBASE"),"\xa0or\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"APN"),"\xa0push notification token,")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Hash of the ",(0,a.kt)("inlineCode",{parentName:"p"},"chat_id")," a user is not interested in for notifications,")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The number of times a push notification record has been modified by the user,")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The number of contacts a client has, in case\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),"\xa0is set."))),(0,a.kt)("h4",{id:"pushnotificationregistrationresponse"},"PushNotificationRegistrationResponse"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"success"),": whether the registration was successful"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"error"),": the error type, if any"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"request_id"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0hash of the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"signature"),"\xa0of the request"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"preferences"),": the server stored preferences in case of an error"),(0,a.kt)("h4",{id:"contactcodeadvertisement"},"ContactCodeAdvertisement"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"push_notification_info"),": the information for each device advertised"),(0,a.kt)("p",null,"DATA DISCLOSED"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The chat key of the sender")),(0,a.kt)("h4",{id:"pushnotificationquery"},"PushNotificationQuery"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"public_keys"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the public keys the client is interested in"),(0,a.kt)("p",null,"DATA DISCLOSED"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The hash of the public keys the client is interested in")),(0,a.kt)("h4",{id:"pushnotificationqueryinfo"},"PushNotificationQueryInfo"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),": the access token used to send a push notification"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),"\xa0of the device associated with the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"public_key"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the public key associated with this\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),"\nand\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"allowed_key_list"),": a list of encrypted access tokens to be returned\nto the client in case there\u2019s any filtering on public keys in place."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"grant"),": the grant used to register with this server."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"version"),": the version of the registration on the server."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"server_public_key"),": the compressed public key of the server."),(0,a.kt)("h4",{id:"pushnotificationqueryresponse"},"PushNotificationQueryResponse"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"info"),": a list of\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationQueryInfo"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),": the message id of the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationQueryInfo"),"\nthe server is replying to."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"success"),": whether the query was successful."),(0,a.kt)("h4",{id:"pushnotification"},"PushNotification"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"access_token"),": the access token used to send a push notification.\n",(0,a.kt)("inlineCode",{parentName:"p"},"chat_id"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"chat_id"),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"public_key"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the compressed public key of the receiving client.\n",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),": the ",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id")," of the receiving client.\n",(0,a.kt)("inlineCode",{parentName:"p"},"message"),": the encrypted message that is being notified on.\n",(0,a.kt)("inlineCode",{parentName:"p"},"type"),": the type of the push notification, either\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"MESSAGE"),"\xa0or\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"MENTION"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"author"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256"),"\xa0of the public key of the sender"),(0,a.kt)("p",null,"Data disclosed"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256")," hash\xa0of the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"chat_id"),"\xa0the notification is to be sent for")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The cypher text of the message")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"SHAKE-256")," hash\xa0of the public key of the sender")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The type of notification"))),(0,a.kt)("h4",{id:"pushnotificationrequest"},"PushNotificationRequest"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"requests"),": a list of\xa0PushNotification\n",(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),": the\xa0",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},"Status message id")),(0,a.kt)("p",null,"Data disclosed"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The status ",(0,a.kt)("inlineCode",{parentName:"li"},"message_id")," for which the notification is for")),(0,a.kt)("h4",{id:"pushnotificationresponse"},"PushNotificationResponse"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),": the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"message_id"),"\xa0being notified on.\n",(0,a.kt)("inlineCode",{parentName:"p"},"reports"),": a list of\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"PushNotificationReport")),(0,a.kt)("h4",{id:"pushnotificationreport"},"PushNotificationReport"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"success"),": whether the push notification was successful.\n",(0,a.kt)("inlineCode",{parentName:"p"},"error"),": the type of the error in case of failure.\n",(0,a.kt)("inlineCode",{parentName:"p"},"public_key"),": the public key of the user being notified.\n",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id"),": the ",(0,a.kt)("inlineCode",{parentName:"p"},"installation_id")," of the user being notified."),(0,a.kt)("h3",{id:"anonymous-mode"},"Anonymous Mode"),(0,a.kt)("p",null,"In order to preserve privacy, the client MAY provide anonymous mode of operations\nto propagate information about the user.\nA client in anonymous mode can register with the server\nusing a key that is different from their chat key.\nThis will hide their real chat key. This public key is effectively a secret and\nSHOULD only be disclosed to clients approved to notify a user."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A client MAY advertise the access token on the\n",(0,a.kt)("a",{parentName:"p",href:"../../waku/standards/application/53/x3dh"},"contact-code topic"),"\nof the key generated.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A client MAY share their public key contact updates in the\n",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protobuf record"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A client receiving a push notification public key\nSHOULD listen to the contact code topic of the push notification public key for updates."))),(0,a.kt)("p",null,"The method described above effectively does not share the identity of the sender\nnor the receiver to the server, but\nMAY result in missing push notifications\nas the propagation of the secret is left to the client.\nThis can be mitigated by ",(0,a.kt)("a",{parentName:"p",href:"../62/payloads"},"device syncing"),",\nbut not completely addressed."),(0,a.kt)("h2",{id:"securityprivacy-considerations"},"Security/Privacy Considerations"),(0,a.kt)("p",null,"If anonymous mode is not used,\nwhen registering with a push notification service a client will disclose:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The devices that will receive notifications.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The chat key."))),(0,a.kt)("p",null,"A client MAY disclose:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The hash of the ",(0,a.kt)("inlineCode",{parentName:"li"},"chat_id")," they want to filter out.")),(0,a.kt)("p",null,"When running in anonymous mode, the client\u2019s chat key is not disclosed."),(0,a.kt)("p",null,"When querying a push notification server a client will disclose:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"That it is interested in sending push notification to another client,\nbut querying client\u2019s chat key is not disclosed.")),(0,a.kt)("p",null,"When sending a push notification a client will disclose:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"shake-256")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"chat_id"),".")),(0,a.kt)("h2",{id:"copyright"},"Copyright"),(0,a.kt)("p",null,"Copyright and related rights waived via ",(0,a.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/blob/master/docs/raw/push-notification-server"},"PUSH-NOTIFICATION-SERVER, Initial Specification")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1"},"Push Notification, Apple Developer")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://firebase.google.com"},"Firebase")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"../../waku/standards/core/13/store"},"13/WAKU2-STORE")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/appleboy/gorush"},"gorush")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"../../waku/standards/application/54/x3dh-sessions"},"54/WAKU2-X3DH-SESSIONS")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"../62/payloads"},"62/PAYLOAD")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.202.pdf"},"SHAKE-256")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://developers.google.com/protocol-buffers"},"Protocol Buffers")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"../../waku/standards/application/53/x3dh"},"53/WAKU2-X3DH"))))}c.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,k=u["".concat(l,".").concat(h)]||u[h]||c[h]||r;return n?i.createElement(k,o(o({ref:t},d),{},{components:n})):i.createElement(k,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93262:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/notification-03a7ab32603bbca7741c8513211468dd.png"},64596:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/registration-cc6fec7743be6c531d9b93203960114f.png"}}]);