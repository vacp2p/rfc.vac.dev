"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[117],{91607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={title:"SECURE-TRANSPORT",name:"Secure Transport",status:"deprecated",description:"This document describes how Status provides a secure channel between two peers, providing confidentiality, integrity, authenticity, and forward secrecy.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Andrea Maria Piana &lt;andreap@status.im&gt;","Corey Petty &lt;corey@status.im&gt;","Dean Eigenmann &lt;dean@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;","Pedro Pombeiro &lt;pedro@status.im&gt;"]},s=void 0,o={unversionedId:"deprecated/secure-transport",id:"deprecated/secure-transport",title:"SECURE-TRANSPORT",description:"This document describes how Status provides a secure channel between two peers, providing confidentiality, integrity, authenticity, and forward secrecy.",source:"@site/status/deprecated/secure-transport.md",sourceDirName:"deprecated",slug:"/deprecated/secure-transport",permalink:"/status/deprecated/secure-transport",draft:!1,tags:[],version:"current",frontMatter:{title:"SECURE-TRANSPORT",name:"Secure Transport",status:"deprecated",description:"This document describes how Status provides a secure channel between two peers, providing confidentiality, integrity, authenticity, and forward secrecy.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Andrea Maria Piana &lt;andreap@status.im&gt;","Corey Petty &lt;corey@status.im&gt;","Dean Eigenmann &lt;dean@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;","Pedro Pombeiro &lt;pedro@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"PUSH-NOTIFICATION-SERVER",permalink:"/status/deprecated/push-notification-server"},next:{title:"WAKU-MAILSERVER",permalink:"/status/deprecated/waku-mailserver"}},l={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Definitions",id:"definitions",level:3},{value:"Design Requirements",id:"design-requirements",level:3},{value:"Conventions",id:"conventions",level:3},{value:"Transport Layer",id:"transport-layer",level:3},{value:"User flow for 1-to-1 communications",id:"user-flow-for-1-to-1-communications",level:3},{value:"Account generation",id:"account-generation",level:4},{value:"Account recovery",id:"account-recovery",level:4},{value:"Messaging",id:"messaging",level:2},{value:"End-to-end encryption",id:"end-to-end-encryption",level:3},{value:"Prekeys",id:"prekeys",level:3},{value:"Bundle retrieval",id:"bundle-retrieval",level:3},{value:"1:1 chat contact request",id:"11-chat-contact-request",level:3},{value:"Initial key exchange flow (X3DH)",id:"initial-key-exchange-flow-x3dh",level:4},{value:"Double Ratchet",id:"double-ratchet",level:4},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Session management",id:"session-management",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Concurrent sessions",id:"concurrent-sessions",level:3},{value:"Re-keying",id:"re-keying",level:3},{value:"Multi-device support",id:"multi-device-support",level:3},{value:"Pairing",id:"pairing",level:3},{value:"Sending messages to a paired group",id:"sending-messages-to-a-paired-group",level:3},{value:"Partitioned devices",id:"partitioned-devices",level:3},{value:"Changelog",id:"changelog",level:2},{value:"Version 0.3",id:"version-03",level:3},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Status: deprecated"),(0,i.kt)("li",{parentName:"ul"},"Editor: Filip Dimitrijevic ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:filip@status.im"},"filip@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Contributors:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Andrea Maria Piana ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Corey Petty ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:corey@status.im"},"corey@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Dean Eigenmann ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:dean@status.im"},"dean@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:oskar@status.im"},"oskar@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Pedro Pombeiro ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:pedro@status.im"},"pedro@status.im"),">")))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"This document describes how Status provides a secure channel between two peers,\nand thus provide confidentiality, integrity, authenticity and forward secrecy.\nIt is transport-agnostic and works over asynchronous networks."),(0,i.kt)("p",null,"It builds on the ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/x3dh/"},"X3DH")," and ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/doubleratchet/"},"Double Ratchet")," specifications, with some adaptations to operate in a decentralized environment."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This document describes how nodes establish a secure channel,\nand how various conversational security properties are achieved."),(0,i.kt)("h3",{id:"definitions"},"Definitions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Perfect Forward Secrecy")," is a feature of specific key-agreement protocols\nwhich provide assurances that session keys will not be compromised even if the private keys of the participants are compromised.\nSpecifically, past messages cannot be decrypted by a third-party who manages to get a hold of a private key.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Secret channel")," describes a communication channel where Double Ratchet algorithm is in use."))),(0,i.kt)("h3",{id:"design-requirements"},"Design Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Confidentiality"),": The adversary should not be able to learn what data is being exchanged between two Status clients."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Authenticity"),": The adversary should not be able to cause either endpoint of a Status 1:1 chat\nto accept data from any third party as though it came from the other endpoint."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Forward Secrecy"),": The adversary should not be able to learn\nwhat data was exchanged between two Status clients if, at some later time,\nthe adversary compromises one or both of the endpoint devices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Integrity"),": The adversary should not be able to cause either endpoint of a Status 1:1 chat\nto accept data that has been tampered with.")),(0,i.kt)("p",null,"All of these properties are ensured by the use of ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/doubleratchet/"},"Signal's Double Ratchet")),(0,i.kt)("h3",{id:"conventions"},"Conventions"),(0,i.kt)("p",null,"Types used in this specification are defined using ",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"Protobuf"),"."),(0,i.kt)("h3",{id:"transport-layer"},"Transport Layer"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"status/deprecated/whisper-usage"},"Whisper")," and ",(0,i.kt)("a",{parentName:"p",href:"status/deprecated/waku-usage"},"Waku")," serves as the transport layers for the Status chat protocol."),(0,i.kt)("h3",{id:"user-flow-for-1-to-1-communications"},"User flow for 1-to-1 communications"),(0,i.kt)("h4",{id:"account-generation"},"Account generation"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"status/deprecated/account"},"Account specification")),(0,i.kt)("h4",{id:"account-recovery"},"Account recovery"),(0,i.kt)("p",null,"If Alice later recovers her account, the Double Ratchet state information will not be available,\nso she is no longer able to decrypt any messages received from existing contacts."),(0,i.kt)("p",null,"If an incoming message (on the same Whisper/Waku topic) fails to decrypt,\nthe node replies a message with the current bundle, so that the node notifies the other end of the new device.\nSubsequent communications will use this new bundle."),(0,i.kt)("h2",{id:"messaging"},"Messaging"),(0,i.kt)("p",null,"All 1:1 and group chat messaging in Status is subject to end-to-end encryption\nto provide users with a strong degree of privacy and security.\nPublic chat messages are publicly readable by anyone since there's no permission model\nfor who is participating in a public chat."),(0,i.kt)("p",null,"The rest of this document is purely about 1:1 and private group chat.\nPrivate group chat largely reduces to 1:1 chat, since there's a secure channel between each pair-wise participant."),(0,i.kt)("h3",{id:"end-to-end-encryption"},"End-to-end encryption"),(0,i.kt)("p",null,"End-to-end encryption (E2EE) takes place between two clients.\nThe main cryptographic protocol is a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/status-im/doubleratchet/"},"Status implementation")," of the Double Ratchet protocol,\nwhich is in turn derived from the ",(0,i.kt)("a",{parentName:"p",href:"https://otr.cypherpunks.ca/Protocol-v3-4.1.1.html"},"Off-the-Record protocol"),", using a different ratchet.\nThe transport protocol subsequently encrypt the message payload - Whisper/Waku (see section ",(0,i.kt)("a",{parentName:"p",href:"#transport-layer"},"Transport Layer"),") -, using symmetric key encryption.\nFurthermore, Status uses the concept of prekeys (through the use of ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/x3dh/"},"X3DH"),")\nto allow the protocol to operate in an asynchronous environment.\nIt is not necessary for two parties to be online at the same time to initiate an encrypted conversation."),(0,i.kt)("p",null,"Status uses the following cryptographic primitives:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Whisper/Waku"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"AES-256-GCM"),(0,i.kt)("li",{parentName:"ul"},"ECIES"),(0,i.kt)("li",{parentName:"ul"},"ECDSA"),(0,i.kt)("li",{parentName:"ul"},"KECCAK-256"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"X3DH"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Elliptic curve Diffie-Hellman key exchange (secp256k1)"),(0,i.kt)("li",{parentName:"ul"},"KECCAK-256"),(0,i.kt)("li",{parentName:"ul"},"ECDSA"),(0,i.kt)("li",{parentName:"ul"},"ECIES"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Double Ratchet"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"HMAC-SHA-256 as MAC")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Elliptic curve Diffie-Hellman key exchange (Curve25519)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"AES-256-CTR with HMAC-SHA-256 and IV derived alongside an encryption key"),(0,i.kt)("p",{parentName:"li"},"The node achieves key derivation using HKDF."))))),(0,i.kt)("h3",{id:"prekeys"},"Prekeys"),(0,i.kt)("p",null,"Every client initially generates some key material which is stored locally:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Identity keypair based on secp256k1 - ",(0,i.kt)("inlineCode",{parentName:"li"},"IK")),(0,i.kt)("li",{parentName:"ul"},"A signed prekey based on secp256k1 - ",(0,i.kt)("inlineCode",{parentName:"li"},"SPK")),(0,i.kt)("li",{parentName:"ul"},"A prekey signature - ",(0,i.kt)("inlineCode",{parentName:"li"},"Sig(IK, Encode(SPK))"))),(0,i.kt)("p",null,"More details can be found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"X3DH Prekey bundle creation")," section of ",(0,i.kt)("a",{parentName:"p",href:"/status/deprecated/account##x3dh-prekey-bundles"},"2/ACCOUNT"),"."),(0,i.kt)("p",null,"Prekey bundles can be extracted from any user's messages,\nor found via searching for their specific topic, ",(0,i.kt)("inlineCode",{parentName:"p"},"{IK}-contact-code"),"."),(0,i.kt)("p",null,"TODO: See below on bundle retrieval, this seems like enhancement and parameter for recommendation"),(0,i.kt)("h3",{id:"bundle-retrieval"},"Bundle retrieval"),(0,i.kt)("p",null,"X3DH works by having client apps create and make available a bundle of prekeys (the X3DH bundle)\nthat can later be requested by other interlocutors when they wish to start a conversation with a given user."),(0,i.kt)("p",null,"In the X3DH specification, nodes typically use a shared server\nto store bundles and allow other users to download them upon request.\nGiven Status' goal of decentralization,\nStatus chat clients cannot rely on the same type of infrastructure\nand must achieve the same result using other means.\nBy growing order of convenience and security, the considered approaches are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"contact codes;"),(0,i.kt)("li",{parentName:"ul"},"public and one-to-one chats;"),(0,i.kt)("li",{parentName:"ul"},"QR codes;"),(0,i.kt)("li",{parentName:"ul"},"ENS record;"),(0,i.kt)("li",{parentName:"ul"},"Decentralized permanent storage (e.g. Swarm, IPFS)."),(0,i.kt)("li",{parentName:"ul"},"Whisper/Waku")),(0,i.kt)("p",null,"Currently, only public and one-to-one message exchanges and Whisper/Waku is used to exchange bundles."),(0,i.kt)("p",null,"Since bundles stored in QR codes or ENS records cannot be updated to delete already used keys,\nthe approach taken is to rotate more frequently the bundle (once every 24 hours),\nwhich will be propagated by the app through the channel available."),(0,i.kt)("h3",{id:"11-chat-contact-request"},"1:1 chat contact request"),(0,i.kt)("p",null,"There are two phases in the initial negotiation of a 1:1 chat:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Identity verification")," (e.g., face-to-face contact exchange through QR code, Identicon matching).\nA QR code serves two purposes simultaneously - identity verification and initial bundle retrieval;"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Asynchronous initial key exchange"),", using X3DH.")),(0,i.kt)("p",null,"For more information on account generation and trust establishment, see ",(0,i.kt)("a",{parentName:"p",href:"/status/deprecated/account"},"2/ACCOUNT")),(0,i.kt)("h4",{id:"initial-key-exchange-flow-x3dh"},"Initial key exchange flow (X3DH)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/x3dh/#sending-the-initial-message"},"Section 3 of the X3DH protocol")," describes the initial key exchange flow, with some additional context:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The users' identity keys ",(0,i.kt)("inlineCode",{parentName:"li"},"IK_A")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"IK_B")," correspond to their respective Status chat public keys;"),(0,i.kt)("li",{parentName:"ul"},"Since it is not possible to guarantee that a prekey will be used only once in a decentralized world,\nthe one-time prekey ",(0,i.kt)("inlineCode",{parentName:"li"},"OPK_B")," is not used in this scenario;"),(0,i.kt)("li",{parentName:"ul"},"Nodes do not send Bundles to a centralized server, but instead served in a decentralized way as described in ",(0,i.kt)("a",{parentName:"li",href:"#bundle-retrieval"},"bundle retrieval"),".")),(0,i.kt)("p",null,"Alice retrieves Bob's prekey bundle, however it is not specific to Alice. It contains:"),(0,i.kt)("p",null,"(",(0,i.kt)("a",{parentName:"p",href:"https://github.com/status-im/status-go/blob/a904d9325e76f18f54d59efc099b63293d3dcad3/services/shhext/chat/encryption.proto#L12"},"protobuf"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"// X3DH prekey bundle\nmessage Bundle {\n\n  bytes identity = 1;\n\n  map<string,SignedPreKey> signed_pre_keys = 2;\n\n  bytes signature = 4;\n\n  int64 timestamp = 5;\n}\n\n```golang\n- `identity`: Identity key `IK_B`\n- `signed_pre_keys`: Signed prekey `SPK_B` for each device, indexed by `installation-id`\n- `signature`: Prekey signature &lt;i&gt;Sig(`IK_B`, Encode(`SPK_B`))&lt;/i&gt;\n- `timestamp`: When the bundle was created locally\n\n([protobuf](https://github.com/status-im/status-go/blob/a904d9325e76f18f54d59efc099b63293d3dcad3/services/shhext/chat/encryption.proto#L5))\n\n``` protobuf\nmessage SignedPreKey {\n  bytes signed_pre_key = 1;\n  uint32 version = 2;\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signature")," is generated by sorting ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id")," in lexicographical order, and concatenating the ",(0,i.kt)("inlineCode",{parentName:"p"},"signed-pre-key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version"),":"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"installation-id-1signed-pre-key1version1installation-id2signed-pre-key2-version-2")),(0,i.kt)("h4",{id:"double-ratchet"},"Double Ratchet"),(0,i.kt)("p",null,"Having established the initial shared secret ",(0,i.kt)("inlineCode",{parentName:"p"},"SK")," through X3DH, it can be used to seed a Double Ratchet exchange between Alice and Bob."),(0,i.kt)("p",null,"Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/doubleratchet/"},"Double Ratchet spec")," for more details."),(0,i.kt)("p",null,"The initial message sent by Alice to Bob is sent as a top-level ",(0,i.kt)("inlineCode",{parentName:"p"},"ProtocolMessage")," (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/status-im/status-go/blob/a904d9325e76f18f54d59efc099b63293d3dcad3/services/shhext/chat/encryption.proto#L65"},"protobuf"),")\ncontaining a map of ",(0,i.kt)("inlineCode",{parentName:"p"},"DirectMessageProtocol")," indexed by ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id")," (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/status-im/status-go/blob/1ac9dd974415c3f6dee95145b6644aeadf02f02c/services/shhext/chat/encryption.proto#L56"},"protobuf"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message ProtocolMessage {\n\n  string installation_id = 2;\n\n  repeated Bundle bundles = 3;\n\n  // One to one message, encrypted, indexed by installation_id\n  map<string,DirectMessageProtocol> direct_message = 101;\n\n  // Public chats, not encrypted\n  bytes public_message = 102;\n\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bundles"),": a sequence of bundles"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"installation_id"),": the installation id of the sender"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"direct_message")," is a map of ",(0,i.kt)("inlineCode",{parentName:"li"},"DirectMessageProtocol")," indexed by ",(0,i.kt)("inlineCode",{parentName:"li"},"installation-id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public_message"),": unencrypted public chat message.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message DirectMessageProtocol {\n  X3DHHeader X3DH_header = 1;\n  DRHeader DR_header = 2;\n  DHHeader DH_header = 101;\n  // Encrypted payload\n  bytes payload = 3;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"- `X3DH_header`: the `X3DHHeader` field in `DirectMessageProtocol` contains:\n\n    ([protobuf](https://github.com/status-im/status-go/blob/a904d9325e76f18f54d59efc099b63293d3dcad3/services/shhext/chat/encryption.proto#L47))\n    ``` protobuf\n    message X3DHHeader {\n      bytes key = 1;\n      bytes id = 4;\n    }\n    ```\n\n    - `key`: Alice's ephemeral key `EK_A`;\n    - `id`: Identifier stating which of Bob's prekeys Alice used, in this case Bob's bundle signed prekey.\n\n    Alice's identity key `IK_A` is sent at the transport layer level (Whisper/Waku);\n\n- `DR_header`: Double ratchet header ([protobuf](https://github.com/status-im/status-go/blob/a904d9325e76f18f54d59efc099b63293d3dcad3/services/shhext/chat/encryption.proto#L31)). Used when Bob's public bundle is available:\n    ``` protobuf\n    message DRHeader {\n      bytes key = 1;\n      uint32 n = 2;\n      uint32 pn = 3;\n      bytes id = 4;\n    }\n    ```\n    - `key`: Alice's current ratchet public key (as mentioned in [DR spec section 2.2](https://signal.org/docs/specifications/doubleratchet/#symmetric-key-ratchet));\n    - `n`: number of the message in the sending chain;\n    - `pn`: length of the previous sending chain;\n    - `id`: Bob's bundle ID.\n\n- `DH_header`: Diffie-Helman header (used when Bob's bundle is not available):\n    ([protobuf](https://github.com/status-im/status-go/blob/a904d9325e76f18f54d59efc099b63293d3dcad3/services/shhext/chat/encryption.proto#L42))\n    ``` protobuf\n    message DHHeader {\n      bytes key = 1;\n    }\n    ```\n    - `key`: Alice's compressed ephemeral public key.\n\n- `payload`:\n    - if a bundle is available, contains payload encrypted with the Double Ratchet algorithm;\n    - otherwise, payload encrypted with output key of DH exchange (no Perfect Forward Secrecy).\n")),(0,i.kt)("h2",{id:"security-considerations"},"Security Considerations"),(0,i.kt)("p",null,"The same considerations apply as in ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/x3dh/#security-considerations"},"section 4 of the X3DH spec")," and ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/doubleratchet/#security-considerations"},"section 6 of the Double Ratchet spec"),", with some additions detailed below."),(0,i.kt)("h2",{id:"session-management"},"Session management"),(0,i.kt)("p",null,"A node identifies a peer by two pieces of data:"),(0,i.kt)("p",null,"1) An ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id")," which is generated upon creating a new account in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Status")," application\n2) Their identity Whisper/Waku key"),(0,i.kt)("h3",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"A node initializes a new session once a successful X3DH exchange has taken place. Subsequent messages will use the established session until re-keying is necessary."),(0,i.kt)("h3",{id:"concurrent-sessions"},"Concurrent sessions"),(0,i.kt)("p",null,"If a node creates two sessions concurrently between two peers, the one with the symmetric key first in byte order SHOULD be used, this marks that the other has expired."),(0,i.kt)("h3",{id:"re-keying"},"Re-keying"),(0,i.kt)("p",null,"On receiving a bundle from a given peer with a higher version, the old bundle SHOULD be marked as expired and a new session SHOULD be established on the next message sent."),(0,i.kt)("h3",{id:"multi-device-support"},"Multi-device support"),(0,i.kt)("p",null,"Multi-device support is quite challenging as there is not a central place\nwhere information on which and how many devices (identified by their respective ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id"),") belongs to a whisper-identity / waku-identity."),(0,i.kt)("p",null,"Furthermore, account recovery always needs to be taken into consideration,\nwhere a user wipes clean the whole device and the nodes loses all the information about any previous sessions."),(0,i.kt)("p",null,"Taking these considerations into account, the way the network propagates multi-device information using x3dh bundles,\nwhich will contain information about paired devices as well as information about the sending device."),(0,i.kt)("p",null,"This means that every time a new device is paired, the bundle needs to be updated and propagated with the new information,\nthe user has the responsibility to make sure the pairing is successful."),(0,i.kt)("p",null,"The method is loosely based on ",(0,i.kt)("a",{parentName:"p",href:"https://signal.org/docs/specifications/sesame/"},"Sesame"),"."),(0,i.kt)("h3",{id:"pairing"},"Pairing"),(0,i.kt)("p",null,"When a user adds a new account in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Status")," application, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id")," will be generated.\nThe device should be paired as soon as possible if other devices are present.\nOnce paired the contacts will be notified of the new device and it will be included in further communications."),(0,i.kt)("p",null,"If a bundle received from the ",(0,i.kt)("inlineCode",{parentName:"p"},"IK")," is different to the ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id"),",\nthe device will be shown to the user and will have to be manually approved, to a maximum of 3.\nOnce that is done any message sent by one device will also be sent to any other enabled device."),(0,i.kt)("p",null,"Once a user enables a new device, a new bundle will be generated which will include pairing information."),(0,i.kt)("p",null,"The bundle will be propagated to contacts through the usual channels."),(0,i.kt)("p",null,"Removal of paired devices is a manual step that needs to be applied on each device,\nand consist simply in disabling the device, at which point pairing information will not be propagated anymore."),(0,i.kt)("h3",{id:"sending-messages-to-a-paired-group"},"Sending messages to a paired group"),(0,i.kt)("p",null,"When sending a message, the peer will send a message to other ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id")," that they have seen.\nThe node caps the number of devices to 3, ordered by last activity.\nThe node sends messages using pairwise encryption, including their own devices."),(0,i.kt)("p",null,"Account recovery"),(0,i.kt)("p",null,"Account recovery is no different from adding a new device, and it is handled in exactly the same way."),(0,i.kt)("h3",{id:"partitioned-devices"},"Partitioned devices"),(0,i.kt)("p",null,"In some cases (i.e. account recovery when no other pairing device is available, device not paired),\nit is possible that a device will receive a message that is not targeted to its own ",(0,i.kt)("inlineCode",{parentName:"p"},"installation-id"),".\nIn this case an empty message containing bundle information is sent back,\nwhich will notify the receiving end of including this device in any further communication."),(0,i.kt)("h2",{id:"changelog"},"Changelog"),(0,i.kt)("h3",{id:"version-03"},"Version 0.3"),(0,i.kt)("p",null,"Released ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added language to include Waku in all relevant places")),(0,i.kt)("h2",{id:"copyright"},"Copyright"),(0,i.kt)("p",null,"Copyright and related rights waived via ",(0,i.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://signal.org/docs/specifications/x3dh/"},"X3DH")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://signal.org/docs/specifications/doubleratchet/"},"Double Ratchet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developers.google.com/protocol-buffers/"},"Protobuf")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/status/deprecated/whisper-usage"},"Whisper")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/status/deprecated/waku-usage"},"Waku")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/status/deprecated/account"},"Account specification")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/doubleratchet/"},"Status implementation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://otr.cypherpunks.ca/Protocol-v3-4.1.1.html"},"Off-the-Record protocol")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://signal.org/docs/specifications/x3dh/"},"X3DH")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/status/deprecated/account"},"ACCOUNT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://signal.org/docs/specifications/sesame/"},"Sesame")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020 commit change"))))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);