"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[4277],{70578:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={title:"WHISPER-USAGE",name:"Whisper Usage",status:"deprecated",description:"Status uses Whisper to provide privacy-preserving routing and messaging on top of devP2P.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Adam Babik &lt;adam@status.im&gt;","Andrea Piana &lt;andreap@status.im&gt;","Corey Petty &lt;corey@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;"]},s=void 0,o={unversionedId:"deprecated/whisper-usage",id:"deprecated/whisper-usage",title:"WHISPER-USAGE",description:"Status uses Whisper to provide privacy-preserving routing and messaging on top of devP2P.",source:"@site/status/deprecated/whisper-usage.md",sourceDirName:"deprecated",slug:"/deprecated/whisper-usage",permalink:"/status/deprecated/whisper-usage",draft:!1,tags:[],version:"current",frontMatter:{title:"WHISPER-USAGE",name:"Whisper Usage",status:"deprecated",description:"Status uses Whisper to provide privacy-preserving routing and messaging on top of devP2P.",editor:"Filip Dimitrijevic &lt;filip@status.im&gt;",contributors:["Adam Babik &lt;adam@status.im&gt;","Andrea Piana &lt;andreap@status.im&gt;","Corey Petty &lt;corey@status.im&gt;","Oskar Thor\xe9n &lt;oskar@status.im&gt;"]},sidebar:"defaultSidebar",previous:{title:"WHISPER-MAILSERVER",permalink:"/status/deprecated/whisper-mailserver"},next:{title:"STATUS-SIMPLE-SCALING",permalink:"/status/raw/simple-scaling"}},l={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Reason",id:"reason",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Whisper packets",id:"whisper-packets",level:2},{value:"Whisper node configuration",id:"whisper-node-configuration",level:2},{value:"Handshake",id:"handshake",level:2},{value:"Rate limiting",id:"rate-limiting",level:2},{value:"Keys management",id:"keys-management",level:2},{value:"Contact code topic",id:"contact-code-topic",level:3},{value:"Partitioned topic",id:"partitioned-topic",level:3},{value:"Public chats",id:"public-chats",level:3},{value:"Group chat topic",id:"group-chat-topic",level:3},{value:"Negotiated topic",id:"negotiated-topic",level:3},{value:"Flow",id:"flow",level:3},{value:"Message encryption",id:"message-encryption",level:2},{value:"Message confirmations",id:"message-confirmations",level:2},{value:"Whisper / Waku bridging",id:"whisper--waku-bridging",level:2},{value:"Whisper V6 extensions",id:"whisper-v6-extensions",level:2},{value:"Request historic messages",id:"request-historic-messages",level:3},{value:"shhext_requestMessages",id:"shhext_requestmessages",level:4},{value:"Changelog",id:"changelog",level:2},{value:"Version 0.3",id:"version-03",level:3},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Status: deprecated"),(0,i.kt)("li",{parentName:"ul"},"Editor: Filip Dimitrijevic ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:filip@status.im"},"filip@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Contributors:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Adam Babik ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:adam@status.im"},"adam@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Andrea Piana ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:andreap@status.im"},"andreap@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Corey Petty ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:corey@status.im"},"corey@status.im"),">"),(0,i.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n ","<",(0,i.kt)("a",{parentName:"li",href:"mailto:oskar@status.im"},"oskar@status.im"),">")))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"Status uses ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-627"},"Whisper")," to provide\nprivacy-preserving routing and messaging on top of devP2P.\nWhisper uses topics to partition its messages,\nand these are leveraged for all chat capabilities.\nIn the case of public chats, the channel name maps directly to its Whisper topic.\nThis allows anyone to listen on a single channel."),(0,i.kt)("p",null,"Additionally, since anyone can receive Whisper envelopes,\nit relies on the ability to decrypt messages to decide who is the correct recipient.\nStatus nodes do not rely upon this property,\nand implement another secure transport layer on top of Whisper."),(0,i.kt)("p",null,"Finally, using an extension of Whisper provides the ability to do offline messaging."),(0,i.kt)("h2",{id:"reason"},"Reason"),(0,i.kt)("p",null,"Provide routing, metadata protection, topic-based multicasting and basic\nencryption properties to support asynchronous chat."),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Whisper node"),": an Ethereum node with Whisper V6 enabled (in the case of go-ethereum, it's ",(0,i.kt)("inlineCode",{parentName:"li"},"--shh")," option)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Whisper network"),": a group of Whisper nodes connected together through the internet connection and forming a graph"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Message"),": a decrypted Whisper message"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Offline message"),": an archived envelope"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Envelope"),": an encrypted message with metadata like topic and Time-To-Live")),(0,i.kt)("h2",{id:"whisper-packets"},"Whisper packets"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Packet Name"),(0,i.kt)("th",{parentName:"tr",align:"right"},"Code"),(0,i.kt)("th",{parentName:"tr",align:null},"EIP-627"),(0,i.kt)("th",{parentName:"tr",align:null},"References"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Status"),(0,i.kt)("td",{parentName:"tr",align:"right"},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#handshake"},"Handshake"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Messages"),(0,i.kt)("td",{parentName:"tr",align:"right"},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-627.md"},"EIP-627"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"PoW Requirement"),(0,i.kt)("td",{parentName:"tr",align:"right"},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-627.md"},"EIP-627"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Bloom Filter"),(0,i.kt)("td",{parentName:"tr",align:"right"},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-627.md"},"EIP-627"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Batch Ack"),(0,i.kt)("td",{parentName:"tr",align:"right"},"11"),(0,i.kt)("td",{parentName:"tr",align:null},"\ud835\ude05"),(0,i.kt)("td",{parentName:"tr",align:null},"Undocumented")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Message Response"),(0,i.kt)("td",{parentName:"tr",align:"right"},"12"),(0,i.kt)("td",{parentName:"tr",align:null},"\ud835\ude05"),(0,i.kt)("td",{parentName:"tr",align:null},"Undocumented")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"P2P Sync Request"),(0,i.kt)("td",{parentName:"tr",align:"right"},"123"),(0,i.kt)("td",{parentName:"tr",align:null},"\ud835\ude05"),(0,i.kt)("td",{parentName:"tr",align:null},"Undocumented")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"P2P Sync Response"),(0,i.kt)("td",{parentName:"tr",align:"right"},"124"),(0,i.kt)("td",{parentName:"tr",align:null},"\ud835\ude05"),(0,i.kt)("td",{parentName:"tr",align:null},"Undocumented")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"P2P Request Complete"),(0,i.kt)("td",{parentName:"tr",align:"right"},"125"),(0,i.kt)("td",{parentName:"tr",align:null},"\ud835\ude05"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/status/deprecated/whisper-mailserver"},"4/WHISPER-MAILSERVER"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"P2P Request"),(0,i.kt)("td",{parentName:"tr",align:"right"},"126"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/status/deprecated/whisper-mailserver"},"4/WHISPER-MAILSERVER"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"P2P Messages"),(0,i.kt)("td",{parentName:"tr",align:"right"},"127"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714/\ud835\ude05 (EIP-627 supports only single envelope in a packet)"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/status/deprecated/whisper-mailserver"},"4/WHISPER-MAILSERVER"))))),(0,i.kt)("h2",{id:"whisper-node-configuration"},"Whisper node configuration"),(0,i.kt)("p",null,"A Whisper node must be properly configured to receive messages from Status clients."),(0,i.kt)("p",null,"Nodes use Whisper's Proof Of Work algorithm to deter denial of service\nand various spam/flood attacks against the Whisper network.\nThe sender of a message must perform some work which in this case means processing time.\nBecause Status' main client is a mobile client, this easily leads to battery draining and poor performance of the app itself.\nHence, all clients MUST use the following Whisper node settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"proof-of-work requirement not larger than ",(0,i.kt)("inlineCode",{parentName:"li"},"0.002")),(0,i.kt)("li",{parentName:"ul"},"time-to-live not lower than ",(0,i.kt)("inlineCode",{parentName:"li"},"10")," (in seconds)")),(0,i.kt)("h2",{id:"handshake"},"Handshake"),(0,i.kt)("p",null,"Handshake is a RLP-encoded packet sent to a newly connected peer. It MUST start with a Status Code (",(0,i.kt)("inlineCode",{parentName:"p"},"0x00"),") and follow up with items:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"[ protocolVersion, PoW, bloom, isLightNode, confirmationsEnabled, rateLimits ]\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"protocolVersion"),": version of the Whisper protocol\n",(0,i.kt)("inlineCode",{parentName:"p"},"PoW"),": minimum PoW accepted by the peer\n",(0,i.kt)("inlineCode",{parentName:"p"},"bloom"),": bloom filter of Whisper topic accepted by the peer\n",(0,i.kt)("inlineCode",{parentName:"p"},"isLightNode"),": when true, the peer won't forward messages\n",(0,i.kt)("inlineCode",{parentName:"p"},"confirmationsEnabled"),": when true, the peer will send message confirmations\n",(0,i.kt)("inlineCode",{parentName:"p"},"rateLimits"),": is ",(0,i.kt)("inlineCode",{parentName:"p"},"[ RateLimitIP, RateLimitPeerID, RateLimitTopic ]")," where each values is an integer with a number of accepted packets per second per IP, Peer ID, and Topic respectively"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bloom, isLightNode, confirmationsEnabled, and rateLimits")," are all optional arguments in the handshake. However, if an optional field is specified, all optional fields preceding it MUST also be specified in order to be unambiguous."),(0,i.kt)("h2",{id:"rate-limiting"},"Rate limiting"),(0,i.kt)("p",null,"In order to provide an optional very basic Denial-of-Service attack protection, each node SHOULD define its own rate limits.\nThe rate limits SHOULD be applied on IPs, peer IDs, and envelope topics."),(0,i.kt)("p",null,"Each node MAY decide to whitelist, i.e. do not rate limit, selected IPs or peer IDs."),(0,i.kt)("p",null,"If a peer exceeds node's rate limits, the connection between them MAY be dropped."),(0,i.kt)("p",null,"Each node SHOULD broadcast its rate limits to its peers using rate limits packet code (",(0,i.kt)("inlineCode",{parentName:"p"},"0x14"),"). The rate limits is RLP-encoded information:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"[ IP limits, PeerID limits, Topic limits ]\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IP limits"),": 4-byte wide unsigned integer\n",(0,i.kt)("inlineCode",{parentName:"p"},"PeerID limits"),": 4-byte wide unsigned integer\n",(0,i.kt)("inlineCode",{parentName:"p"},"Topic limits"),": 4-byte wide unsigned integer"),(0,i.kt)("p",null,"The rate limits MAY also be sent as an optional parameter in the handshake."),(0,i.kt)("p",null,"Each node SHOULD respect rate limits advertised by its peers.\nThe number of packets SHOULD be throttled in order not to exceed peer's rate limits.\nIf the limit gets exceeded, the connection MAY be dropped by the peer."),(0,i.kt)("h2",{id:"keys-management"},"Keys management"),(0,i.kt)("p",null,"The protocol requires a key (symmetric or asymmetric) for the following actions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"signing & verifying messages (asymmetric key)"),(0,i.kt)("li",{parentName:"ul"},"encrypting & decrypting messages (asymmetric or symmetric key).")),(0,i.kt)("p",null,"As nodes require asymmetric keys and symmetric keys to process incoming messages,\nthey must be available all the time and are stored in memory."),(0,i.kt)("p",null,"Keys management for PFS is described in ",(0,i.kt)("a",{parentName:"p",href:"/status/deprecated/whisper-mailserver"},"5/SECURE-TRANSPORT"),"."),(0,i.kt)("p",null,"The Status protocols uses a few particular Whisper topics to achieve its goals."),(0,i.kt)("h3",{id:"contact-code-topic"},"Contact code topic"),(0,i.kt)("p",null,"Nodes use the contact code topic to facilitate the discovery of X3DH bundles so that the first message can be PFS-encrypted."),(0,i.kt)("p",null,"Each user publishes periodically to this topic.\nIf user A wants to contact user B, she SHOULD look for their bundle on this contact code topic."),(0,i.kt)("p",null,"Contact code topic MUST be created following the algorithm below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'contactCode := "0x" + hexEncode(activePublicKey) + "-contact-code"\n\nvar hash []byte = keccak256(contactCode)\nvar topicLen int = 4\n\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\n\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n')),(0,i.kt)("h3",{id:"partitioned-topic"},"Partitioned topic"),(0,i.kt)("p",null,"Whisper is broadcast-based protocol.\nIn theory, everyone could communicate using a single topic but that would be extremely inefficient.\nOpposite would be using a unique topic for each conversation,\nhowever, this brings privacy concerns because it would be much easier to detect whether\nand when two parties have an active conversation."),(0,i.kt)("p",null,"Nodes use partitioned topics to broadcast private messages efficiently.\nBy selecting a number of topic, it is possible to balance efficiency and privacy."),(0,i.kt)("p",null,"Currently, nodes set the number of partitioned topics to ",(0,i.kt)("inlineCode",{parentName:"p"},"5000"),".\nThey MUST be generated following the algorithm below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'var partitionsNum *big.Int = big.NewInt(5000)\nvar partition *big.Int = big.NewInt(0).Mod(publicKey.X, partitionsNum)\n\npartitionTopic := "contact-discovery-" + strconv.FormatInt(partition.Int64(), 10)\n\nvar hash []byte = keccak256(partitionTopic)\nvar topicLen int = 4\n\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\n\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n')),(0,i.kt)("h3",{id:"public-chats"},"Public chats"),(0,i.kt)("p",null,"A public chat MUST use a topic derived from a public chat name following the algorithm below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"var hash []byte\nhash = keccak256(name)\n\ntopicLen = 4\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\n\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n")),(0,i.kt)("h3",{id:"group-chat-topic"},"Group chat topic"),(0,i.kt)("p",null,"Group chats does not have a dedicated topic.\nAll group chat messages (including membership updates) are sent as one-to-one messages to multiple recipients."),(0,i.kt)("h3",{id:"negotiated-topic"},"Negotiated topic"),(0,i.kt)("p",null,"When a client sends a one to one message to another client, it MUST listen to their negotiated topic.\nThis is computed by generating a diffie-hellman key exchange between two members\nand taking the first four bytes of the ",(0,i.kt)("inlineCode",{parentName:"p"},"SHA3-256")," of the key generated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"\nsharedKey, err := ecies.ImportECDSA(myPrivateKey).GenerateShared(\n      ecies.ImportECDSAPublic(theirPublicKey),\n      16,\n      16,\n)\n\n\nhexEncodedKey := hex.EncodeToString(sharedKey)\n\nvar hash []byte = keccak256(hexEncodedKey)\nvar topicLen int = 4\n\nif len(hash) < topicLen {\n    topicLen = len(hash)\n}\n\nvar topic [4]byte\nfor i = 0; i < topicLen; i++ {\n    topic[i] = hash[i]\n}\n")),(0,i.kt)("p",null,"A client SHOULD send to the negotiated topic only if it has received a message from all the devices included in the conversation."),(0,i.kt)("h3",{id:"flow"},"Flow"),(0,i.kt)("p",null,"To exchange messages with client ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", a client ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," SHOULD:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Listen to client's ",(0,i.kt)("inlineCode",{parentName:"li"},"B")," Contact Code Topic to retrieve their bundle information, including a list of active devices"),(0,i.kt)("li",{parentName:"ul"},"Send a message on client's ",(0,i.kt)("inlineCode",{parentName:"li"},"B")," partitioned topic"),(0,i.kt)("li",{parentName:"ul"},"Listen to the Negotiated Topic between ",(0,i.kt)("inlineCode",{parentName:"li"},"A")," & ",(0,i.kt)("inlineCode",{parentName:"li"},"B")),(0,i.kt)("li",{parentName:"ul"},"Once client ",(0,i.kt)("inlineCode",{parentName:"li"},"A")," receives a message from ",(0,i.kt)("inlineCode",{parentName:"li"},"B"),", the Negotiated Topic SHOULD be used")),(0,i.kt)("h2",{id:"message-encryption"},"Message encryption"),(0,i.kt)("p",null,"Even though, the protocol specifies an encryption layer that encrypts messages before passing them to the transport layer,\nWhisper protocol requires each Whisper message to be encrypted anyway."),(0,i.kt)("p",null,"The node encrypts public and group messages using symmetric encryption, and creates the key from a channel name string.\nThe implementation is available in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ethereum/go-ethereum/wiki/Whisper-v6-RPC-API#shh_generatesymkeyfrompassword"},(0,i.kt)("inlineCode",{parentName:"a"},"shh_generateSymKeyFromPassword"))," JSON-RPC method of go-ethereum Whisper implementation."),(0,i.kt)("p",null,"The node encrypts one-to-one messages using asymmetric encryption."),(0,i.kt)("h2",{id:"message-confirmations"},"Message confirmations"),(0,i.kt)("p",null,"Sending a message is a complex process where many things can go wrong.\nMessage confirmations tell a node that a message originating from it has been seen by its direct peers."),(0,i.kt)("p",null,"A node MAY send a message confirmation for any batch of messages received in a packet Messages Code (",(0,i.kt)("inlineCode",{parentName:"p"},"0x01"),")."),(0,i.kt)("p",null,"A node sends a message confirmation using Batch Acknowledge packet (",(0,i.kt)("inlineCode",{parentName:"p"},"0x0b"),") or Message Response packet (",(0,i.kt)("inlineCode",{parentName:"p"},"0x0c"),")."),(0,i.kt)("p",null,"The Batch Acknowledge packet is followed by a keccak256 hash of the envelopes batch data (raw bytes)."),(0,i.kt)("p",null,"The Message Response packet is more complex and is followed by a Versioned Message Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"[ Version, Response]\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Version"),": a version of the Message Response, equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"Response"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"[ Hash, Errors ]")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"Hash")," is a keccak256 hash of the envelopes batch data (raw bytes)\nfor which the confirmation is sent and ",(0,i.kt)("inlineCode",{parentName:"p"},"Errors")," is a list of envelope errors when processing the batch.\nA single error contains ",(0,i.kt)("inlineCode",{parentName:"p"},"[ Hash, Code, Description ]")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"Hash")," is a hash of the processed envelope,\n",(0,i.kt)("inlineCode",{parentName:"p"},"Code")," is an error code and ",(0,i.kt)("inlineCode",{parentName:"p"},"Description")," is a descriptive error message."),(0,i.kt)("p",null,"The supported codes:\n",(0,i.kt)("inlineCode",{parentName:"p"},"1"),": means time sync error which happens when an envelope is too old\nor created in the future (the root cause is no time sync between nodes)."),(0,i.kt)("p",null,"The drawback of sending message confirmations is that it increases the noise in the network because for each sent message,\none or more peers broadcast a corresponding confirmation.\nTo limit that, both Batch Acknowledge packet (",(0,i.kt)("inlineCode",{parentName:"p"},"0x0b"),") and Message Response packet (",(0,i.kt)("inlineCode",{parentName:"p"},"0x0c"),") are not broadcast to peers of the peers,\ni.e. they do not follow epidemic spread."),(0,i.kt)("p",null,"In the current Status network setup, only ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailservers")," support message confirmations.\nA client posting a message to the network and after receiving a confirmation can be sure that the message got processed by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver"),".\nIf additionally, sending a message is limited to non-",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver")," peers,\nit also guarantees that the message got broadcast through the network and it reached the selected ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver"),"."),(0,i.kt)("h2",{id:"whisper--waku-bridging"},"Whisper / Waku bridging"),(0,i.kt)("p",null,"In order to maintain compatibility between Whisper and Waku nodes,\na Status network that implements both Whisper and Waku messaging protocols\nMUST have at least one node that is capable of discovering peers and implements\n",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-627"},"Whisper v6"),",\n",(0,i.kt)("a",{parentName:"p",href:"/waku/deprecated/5/waku0"},"Waku V0")," and\n",(0,i.kt)("a",{parentName:"p",href:"/waku/standards/legacy/6/waku1"},"Waku V1")," specifications."),(0,i.kt)("p",null,"Additionally, any Status network that implements both Whisper and Waku messaging protocols\nMUST implement bridging capabilities as detailed in\n",(0,i.kt)("a",{parentName:"p",href:"/waku/standards/legacy/6/waku1##waku-whisper-bridging"},"Waku V1#Bridging"),".  "),(0,i.kt)("h2",{id:"whisper-v6-extensions"},"Whisper V6 extensions"),(0,i.kt)("h3",{id:"request-historic-messages"},"Request historic messages"),(0,i.kt)("p",null,"Sends a request for historic messages to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver")," node MUST be a direct peer and MUST be marked as trusted (using ",(0,i.kt)("inlineCode",{parentName:"p"},"shh_markTrustedPeer"),")."),(0,i.kt)("p",null,"The request does not wait for the response.\nIt merely sends a peer-to-peer message to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver"),"\nand it's up to ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver")," to process it and start sending historic messages."),(0,i.kt)("p",null,"The drawback of this approach is that it is impossible to tell\nwhich historic messages are the result of which request."),(0,i.kt)("p",null,"It's recommended to return messages from newest to oldest.\nTo move further back in time, use ",(0,i.kt)("inlineCode",{parentName:"p"},"cursor")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"limit"),"."),(0,i.kt)("h4",{id:"shhext_requestmessages"},"shhext_requestMessages"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Object - The message request object:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mailServerPeer")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Mailserver"),"'s enode address."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")," (optional): Lower bound of time range as unix timestamp, default is 24 hours back from now."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")," (optional): Upper bound of time range as unix timestamp, default is now."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"limit")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")," (optional): Limit the number of messages sent back, default is no limit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cursor")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," (optional): Used for paginated requests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topics")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"Array"),": hex-encoded message topics."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"symKeyID")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),": an ID of a symmetric key used to authenticate with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Mailserver"),", derived from Mailserver password.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":\n",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean")," - returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the request was sent."),(0,i.kt)("p",null,"The above ",(0,i.kt)("inlineCode",{parentName:"p"},"topics")," is then converted into a bloom filter and then and sent to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mailserver"),"."),(0,i.kt)("h2",{id:"changelog"},"Changelog"),(0,i.kt)("h3",{id:"version-03"},"Version 0.3"),(0,i.kt)("p",null,"Released ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added Whisper / Waku Bridging section"),(0,i.kt)("li",{parentName:"ul"},"Change to keep ",(0,i.kt)("inlineCode",{parentName:"li"},"Mailserver")," term consistent")),(0,i.kt)("h2",{id:"copyright"},"Copyright"),(0,i.kt)("p",null,"Copyright and related rights waived via ",(0,i.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://eips.ethereum.org/EIPS/eip-627"},"Whisper")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/status/deprecated/whisper-mailserver"},"WHISPER-MAILSERVER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/status/deprecated/secure-transport"},"SECURE-TRANSPORT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ethereum/go-ethereum/wiki/Whisper-v6-RPC-API#shh_generatesymkeyfrompassword"},(0,i.kt)("inlineCode",{parentName:"a"},"shh_generateSymKeyFromPassword"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://eips.ethereum.org/EIPS/eip-627"},"Whisper v6")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/waku/deprecated/5/waku0"},"Waku V0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/waku/standards/legacy/6/waku1"},"Waku V1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/status-im/specs/commit/664dd1c9df6ad409e4c007fefc8c8945b8d324e8"},"May 22, 2020 change commit"))))}m.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(a),h=i,u=c["".concat(l,".").concat(h)]||c[h]||m[h]||r;return a?n.createElement(u,s(s({ref:t},d),{},{components:a})):n.createElement(u,s({ref:t},d))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"}}]);